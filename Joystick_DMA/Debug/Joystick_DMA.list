
Joystick_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003f68  08003f68  00004f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fc8  08003fc8  00004fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00004fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003fd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000ad8  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b34  20000b34  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c63  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c07  00000000  00000000  0000ecef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  000108f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067d  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024067  00000000  00000000  000117f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b047  00000000  00000000  0003585c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de5e3  00000000  00000000  000408a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ee86  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026e8  00000000  00000000  0011eecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001215b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f50 	.word	0x08003f50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003f50 	.word	0x08003f50

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fc75 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f83f 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9a7 	bl	80008f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 f97d 	bl	80008a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8a9 	bl	80006fc <MX_ADC1_Init>
  MX_ADC2_Init();
 80005aa:	f000 f8fb 	bl	80007a4 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 f94d 	bl	800084c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	char buf[20];
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buf, ADC_BUF_LEN);
 80005b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005b6:	4911      	ldr	r1, [pc, #68]	@ (80005fc <main+0x6c>)
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0x70>)
 80005ba:	f000 fd3d 	bl	8001038 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_buf, ADC_BUF_LEN);
 80005be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005c2:	4910      	ldr	r1, [pc, #64]	@ (8000604 <main+0x74>)
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0x78>)
 80005c6:	f000 fd37 	bl	8001038 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		sprintf(buf, "%3d-%3d\n", JoystickX, JoystickY);
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <main+0x7c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <main+0x80>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	1d38      	adds	r0, r7, #4
 80005d6:	490f      	ldr	r1, [pc, #60]	@ (8000614 <main+0x84>)
 80005d8:	f003 f81a 	bl	8003610 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 10);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe06 	bl	80001f0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	1d39      	adds	r1, r7, #4
 80005ea:	230a      	movs	r3, #10
 80005ec:	480a      	ldr	r0, [pc, #40]	@ (8000618 <main+0x88>)
 80005ee:	f002 fc53 	bl	8002e98 <HAL_UART_Transmit>
		HAL_Delay(50);
 80005f2:	2032      	movs	r0, #50	@ 0x32
 80005f4:	f000 fcb8 	bl	8000f68 <HAL_Delay>
		sprintf(buf, "%3d-%3d\n", JoystickX, JoystickY);
 80005f8:	bf00      	nop
 80005fa:	e7e6      	b.n	80005ca <main+0x3a>
 80005fc:	20000210 	.word	0x20000210
 8000600:	20000078 	.word	0x20000078
 8000604:	200005f8 	.word	0x200005f8
 8000608:	200000c0 	.word	0x200000c0
 800060c:	200009e0 	.word	0x200009e0
 8000610:	200009e1 	.word	0x200009e1
 8000614:	08003f68 	.word	0x08003f68
 8000618:	200001c8 	.word	0x200001c8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f810 	bl	8003650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <SystemClock_Config+0xd8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <SystemClock_Config+0xd8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a24      	ldr	r2, [pc, #144]	@ (80006f8 <SystemClock_Config+0xdc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000690:	23b4      	movs	r3, #180	@ 0xb4
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 ff11 	bl	80024c8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9d2 	bl	8000a54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b0:	f001 feba 	bl	8002428 <HAL_PWREx_EnableOverDrive>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ba:	f000 f9cb 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2105      	movs	r1, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f96b 	bl	80029b8 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e8:	f000 f9b4 	bl	8000a54 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	@ 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000710:	4a22      	ldr	r2, [pc, #136]	@ (800079c <MX_ADC1_Init+0xa0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000716:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0x9c>)
 800071e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_ADC1_Init+0x9c>)
 800072c:	2201      	movs	r2, #1
 800072e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_ADC1_Init+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <MX_ADC1_Init+0xa4>)
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_ADC1_Init+0x9c>)
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000752:	2201      	movs	r2, #1
 8000754:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC1_Init+0x9c>)
 800075a:	2201      	movs	r2, #1
 800075c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075e:	480e      	ldr	r0, [pc, #56]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000760:	f000 fc26 	bl	8000fb0 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800076a:	f000 f973 	bl	8000a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800076e:	230d      	movs	r3, #13
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000780:	f000 fd74 	bl	800126c <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800078a:	f000 f963 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007b8:	4a22      	ldr	r2, [pc, #136]	@ (8000844 <MX_ADC2_Init+0xa0>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007e8:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_ADC2_Init+0xa4>)
 80007ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_ADC2_Init+0x9c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_ADC2_Init+0x9c>)
 8000802:	2201      	movs	r2, #1
 8000804:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <MX_ADC2_Init+0x9c>)
 8000808:	f000 fbd2 	bl	8000fb0 <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000812:	f000 f91f 	bl	8000a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000816:	2305      	movs	r3, #5
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_ADC2_Init+0x9c>)
 8000828:	f000 fd20 	bl	800126c <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000832:	f000 f90f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000c0 	.word	0x200000c0
 8000844:	40012100 	.word	0x40012100
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	@ (800089c <MX_USART1_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_USART1_UART_Init+0x4c>)
 8000884:	f002 fab8 	bl	8002df8 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f8e1 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001c8 	.word	0x200001c8
 800089c:	40011000 	.word	0x40011000

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_DMA_Init+0x4c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <MX_DMA_Init+0x4c>)
 80008b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_DMA_Init+0x4c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2038      	movs	r0, #56	@ 0x38
 80008c8:	f001 f85b 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008cc:	2038      	movs	r0, #56	@ 0x38
 80008ce:	f001 f874 	bl	80019ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	203a      	movs	r0, #58	@ 0x3a
 80008d8:	f001 f853 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008dc:	203a      	movs	r0, #58	@ 0x3a
 80008de:	f001 f86c 	bl	80019ba <HAL_NVIC_EnableIRQ>

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <MX_GPIO_Init+0x68>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_GPIO_Init+0x68>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d105      	bne.n	800097a <HAL_ADC_ConvHalfCpltCallback+0x1e>
		Process_ADC_Data(&JoystickX, adc1_buf, ADC_BUF_LEN / 2);
 800096e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000972:	490a      	ldr	r1, [pc, #40]	@ (800099c <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000974:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000976:	f000 f845 	bl	8000a04 <Process_ADC_Data>
	}
	if (hadc->Instance == ADC2) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a09      	ldr	r2, [pc, #36]	@ (80009a4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d105      	bne.n	8000990 <HAL_ADC_ConvHalfCpltCallback+0x34>
		Process_ADC_Data(&JoystickY, adc2_buf, ADC_BUF_LEN / 2);
 8000984:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000988:	4907      	ldr	r1, [pc, #28]	@ (80009a8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800098a:	4808      	ldr	r0, [pc, #32]	@ (80009ac <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800098c:	f000 f83a 	bl	8000a04 <Process_ADC_Data>
	}
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40012000 	.word	0x40012000
 800099c:	20000210 	.word	0x20000210
 80009a0:	200009e0 	.word	0x200009e0
 80009a4:	40012100 	.word	0x40012100
 80009a8:	200005f8 	.word	0x200005f8
 80009ac:	200009e1 	.word	0x200009e1

080009b0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <HAL_ADC_ConvCpltCallback+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d105      	bne.n	80009ce <HAL_ADC_ConvCpltCallback+0x1e>
		Process_ADC_Data(&JoystickX, &adc1_buf[ADC_BUF_LEN / 2],
 80009c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009c6:	490a      	ldr	r1, [pc, #40]	@ (80009f0 <HAL_ADC_ConvCpltCallback+0x40>)
 80009c8:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <HAL_ADC_ConvCpltCallback+0x44>)
 80009ca:	f000 f81b 	bl	8000a04 <Process_ADC_Data>
		ADC_BUF_LEN / 2);
	}
	if (hadc->Instance == ADC2) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a09      	ldr	r2, [pc, #36]	@ (80009f8 <HAL_ADC_ConvCpltCallback+0x48>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d105      	bne.n	80009e4 <HAL_ADC_ConvCpltCallback+0x34>
		Process_ADC_Data(&JoystickY, &adc2_buf[ADC_BUF_LEN / 2],
 80009d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <HAL_ADC_ConvCpltCallback+0x4c>)
 80009de:	4808      	ldr	r0, [pc, #32]	@ (8000a00 <HAL_ADC_ConvCpltCallback+0x50>)
 80009e0:	f000 f810 	bl	8000a04 <Process_ADC_Data>
		ADC_BUF_LEN / 2);
	}
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012000 	.word	0x40012000
 80009f0:	20000404 	.word	0x20000404
 80009f4:	200009e0 	.word	0x200009e0
 80009f8:	40012100 	.word	0x40012100
 80009fc:	200007ec 	.word	0x200007ec
 8000a00:	200009e1 	.word	0x200009e1

08000a04 <Process_ADC_Data>:

void Process_ADC_Data(unsigned char *Joystick, uint8_t *adc_buf, uint16_t len) {
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	80fb      	strh	r3, [r7, #6]
	unsigned int sum = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < len; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	e00a      	b.n	8000a32 <Process_ADC_Data+0x2e>
		sum += adc_buf[i];
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	4413      	add	r3, r2
 8000a2a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < len; i++) {
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf0      	blt.n	8000a1c <Process_ADC_Data+0x18>
	}
	*Joystick = (unsigned char) (sum / len);
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	701a      	strb	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	@ 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a65      	ldr	r2, [pc, #404]	@ (8000c64 <HAL_ADC_MspInit+0x1b4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d15f      	bne.n	8000b92 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b64      	ldr	r3, [pc, #400]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a63      	ldr	r2, [pc, #396]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b61      	ldr	r3, [pc, #388]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b5d      	ldr	r3, [pc, #372]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a5c      	ldr	r2, [pc, #368]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b5a      	ldr	r3, [pc, #360]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4853      	ldr	r0, [pc, #332]	@ (8000c6c <HAL_ADC_MspInit+0x1bc>)
 8000b1e:	f001 fad7 	bl	80020d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b22:	4b53      	ldr	r3, [pc, #332]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b24:	4a53      	ldr	r2, [pc, #332]	@ (8000c74 <HAL_ADC_MspInit+0x1c4>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b28:	4b51      	ldr	r3, [pc, #324]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b50      	ldr	r3, [pc, #320]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b4e      	ldr	r3, [pc, #312]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b42:	4b4b      	ldr	r3, [pc, #300]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b48:	4b49      	ldr	r3, [pc, #292]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b4e:	4b48      	ldr	r3, [pc, #288]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b46      	ldr	r3, [pc, #280]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b5c:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000b62:	4b43      	ldr	r3, [pc, #268]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b68:	4b41      	ldr	r3, [pc, #260]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b6e:	4b40      	ldr	r3, [pc, #256]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b74:	483e      	ldr	r0, [pc, #248]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b76:	f000 ff3b 	bl	80019f0 <HAL_DMA_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000b80:	f7ff ff68 	bl	8000a54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3a      	ldr	r2, [pc, #232]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b88:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b8a:	4a39      	ldr	r2, [pc, #228]	@ (8000c70 <HAL_ADC_MspInit+0x1c0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b90:	e064      	b.n	8000c5c <HAL_ADC_MspInit+0x1ac>
  else if(hadc->Instance==ADC2)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a38      	ldr	r2, [pc, #224]	@ (8000c78 <HAL_ADC_MspInit+0x1c8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d15f      	bne.n	8000c5c <HAL_ADC_MspInit+0x1ac>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba4:	4a30      	ldr	r2, [pc, #192]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bac:	4b2e      	ldr	r3, [pc, #184]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a29      	ldr	r2, [pc, #164]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <HAL_ADC_MspInit+0x1b8>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4825      	ldr	r0, [pc, #148]	@ (8000c7c <HAL_ADC_MspInit+0x1cc>)
 8000be8:	f001 fa72 	bl	80020d0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000bec:	4b24      	ldr	r3, [pc, #144]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000bee:	4a25      	ldr	r2, [pc, #148]	@ (8000c84 <HAL_ADC_MspInit+0x1d4>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000bf2:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c42:	f000 fed5 	bl	80019f0 <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8000c4c:	f7ff ff02 	bl	8000a54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_ADC_MspInit+0x1d0>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c5c:	bf00      	nop
 8000c5e:	3730      	adds	r7, #48	@ 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40012000 	.word	0x40012000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	20000108 	.word	0x20000108
 8000c74:	40026410 	.word	0x40026410
 8000c78:	40012100 	.word	0x40012100
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	20000168 	.word	0x20000168
 8000c84:	40026440 	.word	0x40026440

08000c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_UART_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a17      	ldr	r2, [pc, #92]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_UART_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <HAL_UART_MspInit+0x8c>)
 8000d00:	f001 f9e6 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	@ 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f8db 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <DMA2_Stream0_IRQHandler+0x10>)
 8000d7e:	f000 ff3d 	bl	8001bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000108 	.word	0x20000108

08000d8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DMA2_Stream2_IRQHandler+0x10>)
 8000d92:	f000 ff33 	bl	8001bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000168 	.word	0x20000168

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fc46 	bl	8003660 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20030000 	.word	0x20030000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200009e4 	.word	0x200009e4
 8000e08:	20000b38 	.word	0x20000b38

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:
 8000e42:	58d4      	ldr	r4, [r2, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:
 8000e48:	18c4      	adds	r4, r0, r3
 8000e4a:	428c      	cmp	r4, r1
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
 8000e52:	2300      	movs	r3, #0
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:
 8000e5a:	42a2      	cmp	r2, r4
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
 8000e5e:	f002 fc05 	bl	800366c <__libc_init_array>
 8000e62:	f7ff fb95 	bl	8000590 <main>
 8000e66:	4770      	bx	lr
 8000e68:	20030000 	.word	0x20030000
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	2000005c 	.word	0x2000005c
 8000e74:	08003fd8 	.word	0x08003fd8
 8000e78:	2000005c 	.word	0x2000005c
 8000e7c:	20000b34 	.word	0x20000b34

08000e80 <ADC_IRQHandler>:
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fd5d 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fdd2 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fd75 	bl	80019d6 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fd3d 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200009e8 	.word	0x200009e8

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200009e8 	.word	0x200009e8

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e033      	b.n	800102e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fd6e 	bl	8000ab0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	f043 0202 	orr.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fa64 	bl	80014d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
 800101e:	e001      	b.n	8001024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Start_DMA+0x1e>
 8001052:	2302      	movs	r3, #2
 8001054:	e0e9      	b.n	800122a <HAL_ADC_Start_DMA+0x1f2>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b01      	cmp	r3, #1
 800106a:	d018      	beq.n	800109e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107c:	4b6d      	ldr	r3, [pc, #436]	@ (8001234 <HAL_ADC_Start_DMA+0x1fc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a6d      	ldr	r2, [pc, #436]	@ (8001238 <HAL_ADC_Start_DMA+0x200>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9a      	lsrs	r2, r3, #18
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001090:	e002      	b.n	8001098 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	3b01      	subs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010ac:	d107      	bne.n	80010be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 80a1 	bne.w	8001210 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800110c:	d106      	bne.n	800111c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f023 0206 	bic.w	r2, r3, #6
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	645a      	str	r2, [r3, #68]	@ 0x44
 800111a:	e002      	b.n	8001122 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112a:	4b44      	ldr	r3, [pc, #272]	@ (800123c <HAL_ADC_Start_DMA+0x204>)
 800112c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001132:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_ADC_Start_DMA+0x208>)
 8001134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113a:	4a42      	ldr	r2, [pc, #264]	@ (8001244 <HAL_ADC_Start_DMA+0x20c>)
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001142:	4a41      	ldr	r2, [pc, #260]	@ (8001248 <HAL_ADC_Start_DMA+0x210>)
 8001144:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800114e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800115e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800116e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	334c      	adds	r3, #76	@ 0x4c
 800117a:	4619      	mov	r1, r3
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f000 fce4 	bl	8001b4c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	2b00      	cmp	r3, #0
 800118e:	d12a      	bne.n	80011e6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	@ (800124c <HAL_ADC_Start_DMA+0x214>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d015      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x18e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <HAL_ADC_Start_DMA+0x218>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d105      	bne.n	80011b0 <HAL_ADC_Start_DMA+0x178>
 80011a4:	4b25      	ldr	r3, [pc, #148]	@ (800123c <HAL_ADC_Start_DMA+0x204>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00a      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a27      	ldr	r2, [pc, #156]	@ (8001254 <HAL_ADC_Start_DMA+0x21c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d136      	bne.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_ADC_Start_DMA+0x204>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d130      	bne.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d129      	bne.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e020      	b.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <HAL_ADC_Start_DMA+0x214>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d11b      	bne.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d114      	bne.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	e00b      	b.n	8001228 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000000 	.word	0x20000000
 8001238:	431bde83 	.word	0x431bde83
 800123c:	40012300 	.word	0x40012300
 8001240:	080016c9 	.word	0x080016c9
 8001244:	08001783 	.word	0x08001783
 8001248:	0800179f 	.word	0x0800179f
 800124c:	40012000 	.word	0x40012000
 8001250:	40012100 	.word	0x40012100
 8001254:	40012200 	.word	0x40012200

08001258 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001280:	2b01      	cmp	r3, #1
 8001282:	d101      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x1c>
 8001284:	2302      	movs	r3, #2
 8001286:	e113      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x244>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d925      	bls.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68d9      	ldr	r1, [r3, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	3b1e      	subs	r3, #30
 80012ae:	2207      	movs	r2, #7
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43da      	mvns	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	400a      	ands	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68d9      	ldr	r1, [r3, #12]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	4603      	mov	r3, r0
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4403      	add	r3, r0
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	409a      	lsls	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	e022      	b.n	800132a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	2207      	movs	r2, #7
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	400a      	ands	r2, r1
 8001306:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	4603      	mov	r3, r0
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4403      	add	r3, r0
 8001320:	409a      	lsls	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b06      	cmp	r3, #6
 8001330:	d824      	bhi.n	800137c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b05      	subs	r3, #5
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	400a      	ands	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	3b05      	subs	r3, #5
 800136e:	fa00 f203 	lsl.w	r2, r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34
 800137a:	e04c      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	d824      	bhi.n	80013ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b23      	subs	r3, #35	@ 0x23
 8001396:	221f      	movs	r2, #31
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43da      	mvns	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	400a      	ands	r2, r1
 80013a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b23      	subs	r3, #35	@ 0x23
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80013cc:	e023      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b41      	subs	r3, #65	@ 0x41
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b41      	subs	r3, #65	@ 0x41
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <HAL_ADC_ConfigChannel+0x250>)
 8001418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <HAL_ADC_ConfigChannel+0x254>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d10f      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d8>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b12      	cmp	r3, #18
 800142a:	d10b      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <HAL_ADC_ConfigChannel+0x254>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12b      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <HAL_ADC_ConfigChannel+0x258>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_ADC_ConfigChannel+0x1f4>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b11      	cmp	r3, #17
 800145e:	d122      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <HAL_ADC_ConfigChannel+0x258>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d111      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <HAL_ADC_ConfigChannel+0x260>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3b01      	subs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40012300 	.word	0x40012300
 80014c0:	40012000 	.word	0x40012000
 80014c4:	10000012 	.word	0x10000012
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d8:	4b79      	ldr	r3, [pc, #484]	@ (80016c0 <ADC_Init+0x1f0>)
 80014da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	021a      	lsls	r2, r3, #8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800154a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	4a58      	ldr	r2, [pc, #352]	@ (80016c4 <ADC_Init+0x1f4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d022      	beq.n	80015ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001576:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6899      	ldr	r1, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	e00f      	b.n	80015ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0202 	bic.w	r2, r2, #2
 80015dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6899      	ldr	r1, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e1b      	ldrb	r3, [r3, #24]
 80015e8:	005a      	lsls	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01b      	beq.n	8001634 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800160a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800161a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6859      	ldr	r1, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001626:	3b01      	subs	r3, #1
 8001628:	035a      	lsls	r2, r3, #13
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	e007      	b.n	8001644 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001642:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	3b01      	subs	r3, #1
 8001660:	051a      	lsls	r2, r3, #20
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001686:	025a      	lsls	r2, r3, #9
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800169e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6899      	ldr	r1, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	029a      	lsls	r2, r3, #10
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40012300 	.word	0x40012300
 80016c4:	0f000001 	.word	0x0f000001

080016c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13c      	bne.n	800175c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d12b      	bne.n	8001754 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001700:	2b00      	cmp	r3, #0
 8001702:	d127      	bne.n	8001754 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800171c:	2b00      	cmp	r3, #0
 800171e:	d119      	bne.n	8001754 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0220 	bic.w	r2, r2, #32
 800172e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff f92b 	bl	80009b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800175a:	e00e      	b.n	800177a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fd75 	bl	8001258 <HAL_ADC_ErrorCallback>
}
 800176e:	e004      	b.n	800177a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7ff f8e3 	bl	800095c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fd4a 	bl	8001258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	@ (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	@ (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	@ (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff faa8 	bl	8000f50 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e099      	b.n	8001b40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a2c:	e00f      	b.n	8001a4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a2e:	f7ff fa8f 	bl	8000f50 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d908      	bls.n	8001a4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2203      	movs	r2, #3
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e078      	b.n	8001b40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e8      	bne.n	8001a2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_DMA_Init+0x158>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d107      	bne.n	8001ab8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f023 0307 	bic.w	r3, r3, #7
 8001ace:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d117      	bne.n	8001b12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00e      	beq.n	8001b12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fa6f 	bl	8001fd8 <DMA_CheckFifoParam>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2240      	movs	r2, #64	@ 0x40
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e016      	b.n	8001b40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa26 	bl	8001f6c <DMA_CalcBaseAndBitshift>
 8001b20:	4603      	mov	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	223f      	movs	r2, #63	@ 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	f010803f 	.word	0xf010803f

08001b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_DMA_Start_IT+0x26>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e040      	b.n	8001bf4 <HAL_DMA_Start_IT+0xa8>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d12f      	bne.n	8001be6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f9b8 	bl	8001f10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	223f      	movs	r2, #63	@ 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0216 	orr.w	r2, r2, #22
 8001bba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0208 	orr.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c08:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <HAL_DMA_IRQHandler+0x248>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e48 <HAL_DMA_IRQHandler+0x24c>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a9b      	lsrs	r3, r3, #10
 8001c14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	2208      	movs	r2, #8
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01a      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c54:	2208      	movs	r2, #8
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d012      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ccc:	f043 0204 	orr.w	r2, r3, #4
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd8:	2210      	movs	r2, #16
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d043      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03c      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d018      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
 8001d2a:	e01f      	b.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e016      	b.n	8001d6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0208 	bic.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	2220      	movs	r2, #32
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 808f 	beq.w	8001e9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8087 	beq.w	8001e9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	2220      	movs	r2, #32
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d136      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0216 	bic.w	r2, r2, #22
 8001db4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_DMA_IRQHandler+0x1da>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dea:	223f      	movs	r2, #63	@ 0x3f
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d07e      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
        }
        return;
 8001e12:	e079      	b.n	8001f08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01d      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d031      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e02c      	b.n	8001e9c <HAL_DMA_IRQHandler+0x2a0>
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000
 8001e48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d023      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e01e      	b.n	8001e9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10f      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0210 	bic.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d032      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d022      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d307      	bcc.n	8001ee4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f2      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x2cc>
 8001ee2:	e000      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ee4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
 8001f06:	e000      	b.n	8001f0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f08:	bf00      	nop
    }
  }
}
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b40      	cmp	r3, #64	@ 0x40
 8001f3c:	d108      	bne.n	8001f50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f4e:	e007      	b.n	8001f60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	60da      	str	r2, [r3, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	3b10      	subs	r3, #16
 8001f7c:	4a14      	ldr	r2, [pc, #80]	@ (8001fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f86:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d909      	bls.n	8001fae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	1d1a      	adds	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fac:	e007      	b.n	8001fbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fb6:	f023 0303 	bic.w	r3, r3, #3
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	aaaaaaab 	.word	0xaaaaaaab
 8001fd4:	08003f8c 	.word	0x08003f8c

08001fd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d11f      	bne.n	8002032 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d856      	bhi.n	80020a6 <DMA_CheckFifoParam+0xce>
 8001ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <DMA_CheckFifoParam+0x28>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002011 	.word	0x08002011
 8002004:	08002023 	.word	0x08002023
 8002008:	08002011 	.word	0x08002011
 800200c:	080020a7 	.word	0x080020a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d046      	beq.n	80020aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002020:	e043      	b.n	80020aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800202a:	d140      	bne.n	80020ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002030:	e03d      	b.n	80020ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800203a:	d121      	bne.n	8002080 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d837      	bhi.n	80020b2 <DMA_CheckFifoParam+0xda>
 8002042:	a201      	add	r2, pc, #4	@ (adr r2, 8002048 <DMA_CheckFifoParam+0x70>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	08002059 	.word	0x08002059
 800204c:	0800205f 	.word	0x0800205f
 8002050:	08002059 	.word	0x08002059
 8002054:	08002071 	.word	0x08002071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      break;
 800205c:	e030      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d025      	beq.n	80020b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206e:	e022      	b.n	80020b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002078:	d11f      	bne.n	80020ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800207e:	e01c      	b.n	80020ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d903      	bls.n	800208e <DMA_CheckFifoParam+0xb6>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d003      	beq.n	8002094 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800208c:	e018      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	73fb      	strb	r3, [r7, #15]
      break;
 8002092:	e015      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      break;
 80020a4:	e00b      	b.n	80020be <DMA_CheckFifoParam+0xe6>
      break;
 80020a6:	bf00      	nop
 80020a8:	e00a      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
 80020ac:	e008      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
 80020b0:	e006      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;
 80020b2:	bf00      	nop
 80020b4:	e004      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;
 80020b6:	bf00      	nop
 80020b8:	e002      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ba:	bf00      	nop
 80020bc:	e000      	b.n	80020c0 <DMA_CheckFifoParam+0xe8>
      break;
 80020be:	bf00      	nop
    }
  } 
  
  return status; 
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e177      	b.n	80023dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8166 	bne.w	80023d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d005      	beq.n	8002122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	2b02      	cmp	r3, #2
 8002120:	d130      	bne.n	8002184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0201 	and.w	r2, r3, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d017      	beq.n	80021c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d123      	bne.n	8002214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80c0 	beq.w	80023d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b66      	ldr	r3, [pc, #408]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a65      	ldr	r2, [pc, #404]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_GPIO_Init+0x324>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002272:	4a61      	ldr	r2, [pc, #388]	@ (80023f8 <HAL_GPIO_Init+0x328>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a58      	ldr	r2, [pc, #352]	@ (80023fc <HAL_GPIO_Init+0x32c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d037      	beq.n	800230e <HAL_GPIO_Init+0x23e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a57      	ldr	r2, [pc, #348]	@ (8002400 <HAL_GPIO_Init+0x330>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d031      	beq.n	800230a <HAL_GPIO_Init+0x23a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a56      	ldr	r2, [pc, #344]	@ (8002404 <HAL_GPIO_Init+0x334>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x236>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a55      	ldr	r2, [pc, #340]	@ (8002408 <HAL_GPIO_Init+0x338>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x232>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a54      	ldr	r2, [pc, #336]	@ (800240c <HAL_GPIO_Init+0x33c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x22e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a53      	ldr	r2, [pc, #332]	@ (8002410 <HAL_GPIO_Init+0x340>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x22a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	@ (8002414 <HAL_GPIO_Init+0x344>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x226>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a51      	ldr	r2, [pc, #324]	@ (8002418 <HAL_GPIO_Init+0x348>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a50      	ldr	r2, [pc, #320]	@ (800241c <HAL_GPIO_Init+0x34c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002420 <HAL_GPIO_Init+0x350>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x21a>
 80022e6:	2309      	movs	r3, #9
 80022e8:	e012      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e010      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022ee:	2308      	movs	r3, #8
 80022f0:	e00e      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e00c      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00a      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x240>
 80022fe:	2304      	movs	r3, #4
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x240>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x240>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x240>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x240>
 800230e:	2300      	movs	r3, #0
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002320:	4935      	ldr	r1, [pc, #212]	@ (80023f8 <HAL_GPIO_Init+0x328>)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232e:	4b3d      	ldr	r3, [pc, #244]	@ (8002424 <HAL_GPIO_Init+0x354>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002352:	4a34      	ldr	r2, [pc, #208]	@ (8002424 <HAL_GPIO_Init+0x354>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002358:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HAL_GPIO_Init+0x354>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800237c:	4a29      	ldr	r2, [pc, #164]	@ (8002424 <HAL_GPIO_Init+0x354>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_GPIO_Init+0x354>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002424 <HAL_GPIO_Init+0x354>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HAL_GPIO_Init+0x354>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d0:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <HAL_GPIO_Init+0x354>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	f67f ae84 	bls.w	80020ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3724      	adds	r7, #36	@ 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40013800 	.word	0x40013800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020800 	.word	0x40020800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021000 	.word	0x40021000
 8002410:	40021400 	.word	0x40021400
 8002414:	40021800 	.word	0x40021800
 8002418:	40021c00 	.word	0x40021c00
 800241c:	40022000 	.word	0x40022000
 8002420:	40022400 	.word	0x40022400
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a1f      	ldr	r2, [pc, #124]	@ (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800244e:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_PWREx_EnableOverDrive+0x94>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7fe fd7c 	bl	8000f50 <HAL_GetTick>
 8002458:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800245a:	e009      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800245c:	f7fe fd78 	bl	8000f50 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800246a:	d901      	bls.n	8002470 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e01f      	b.n	80024b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800247c:	d1ee      	bne.n	800245c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002484:	f7fe fd64 	bl	8000f50 <HAL_GetTick>
 8002488:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248a:	e009      	b.n	80024a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800248c:	f7fe fd60 	bl	8000f50 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800249a:	d901      	bls.n	80024a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e007      	b.n	80024b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024ac:	d1ee      	bne.n	800248c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	420e0040 	.word	0x420e0040
 80024c0:	40007000 	.word	0x40007000
 80024c4:	420e0044 	.word	0x420e0044

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e267      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024e6:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e242      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fce6 	bl	8000f50 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fce2 	bl	8000f50 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e207      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fcd2 	bl	8000f50 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fcce 	bl	8000f50 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1f3      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025de:	4b4a      	ldr	r3, [pc, #296]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fc87 	bl	8000f50 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe fc83 	bl	8000f50 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a8      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fc66 	bl	8000f50 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fc62 	bl	8000f50 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e187      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fc46 	bl	8000f50 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fc42 	bl	8000f50 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e167      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fc2f 	bl	8000f50 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fc2b 	bl	8000f50 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e150      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	@ (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	@ (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	@ (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe fbeb 	bl	8000f50 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fbe7 	bl	8000f50 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e10c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fbac 	bl	8000f50 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fba8 	bl	8000f50 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0cb      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe fb96 	bl	8000f50 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fb92 	bl	8000f50 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b5      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a1 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fb66 	bl	8000f50 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fb62 	bl	8000f50 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e087      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fb3b 	bl	8000f50 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fb37 	bl	8000f50 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e05c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e054      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fb24 	bl	8000f50 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fb20 	bl	8000f50 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e045      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e03d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e038      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fa52 	bl	8000f50 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe fa4e 	bl	8000f50 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	@ (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f9b2 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	08003f74 	.word	0x08003f74
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b094      	sub	sp, #80	@ 0x50
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b79      	ldr	r3, [pc, #484]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80e1 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e0db      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b73      	ldr	r3, [pc, #460]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bbc:	e0db      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b73      	ldr	r3, [pc, #460]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b6d      	ldr	r3, [pc, #436]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b6a      	ldr	r3, [pc, #424]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002be4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	f04f 0000 	mov.w	r0, #0
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	0159      	lsls	r1, r3, #5
 8002c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c08:	0150      	lsls	r0, r2, #5
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4621      	mov	r1, r4
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	6139      	str	r1, [r7, #16]
 8002c14:	4629      	mov	r1, r5
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c28:	4659      	mov	r1, fp
 8002c2a:	018b      	lsls	r3, r1, #6
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c32:	4651      	mov	r1, sl
 8002c34:	018a      	lsls	r2, r1, #6
 8002c36:	4651      	mov	r1, sl
 8002c38:	ebb2 0801 	subs.w	r8, r2, r1
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	462b      	mov	r3, r5
 8002c64:	eb49 0303 	adc.w	r3, r9, r3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c76:	4629      	mov	r1, r5
 8002c78:	024b      	lsls	r3, r1, #9
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c80:	4621      	mov	r1, r4
 8002c82:	024a      	lsls	r2, r1, #9
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c94:	f7fd fb04 	bl	80002a0 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca0:	e058      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	4611      	mov	r1, r2
 8002cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0159      	lsls	r1, r3, #5
 8002cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cce:	0150      	lsls	r0, r2, #5
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00eb      	lsls	r3, r5, #3
 8002d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	18e3      	adds	r3, r4, r3
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	464b      	mov	r3, r9
 8002d18:	eb45 0303 	adc.w	r3, r5, r3
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	028b      	lsls	r3, r1, #10
 8002d2e:	4621      	mov	r1, r4
 8002d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d34:	4621      	mov	r1, r4
 8002d36:	028a      	lsls	r2, r1, #10
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	61fa      	str	r2, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	f7fd faaa 	bl	80002a0 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3750      	adds	r7, #80	@ 0x50
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	@ (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08003f84 	.word	0x08003f84

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff ffdc 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	@ (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	08003f84 	.word	0x08003f84

08002df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e042      	b.n	8002e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fd ff32 	bl	8000c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	@ 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f973 	bl	8003128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	@ 0x28
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d175      	bne.n	8002fa4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Transmit+0x2c>
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e06e      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	@ 0x21
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe f83b 	bl	8000f50 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x6c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f0c:	e02e      	b.n	8002f6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	@ 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f848 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e03a      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1cb      	bne.n	8002f0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	@ 0x40
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f814 	bl	8002fae <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e006      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fbe:	e03b      	b.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d037      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fd ffc2 	bl	8000f50 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e03a      	b.n	8003058 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d020      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d01d      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b08      	cmp	r3, #8
 8003008:	d116      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f81d 	bl	8003060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2208      	movs	r2, #8
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e00f      	b.n	8003058 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	429a      	cmp	r2, r3
 8003054:	d0b4      	beq.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b095      	sub	sp, #84	@ 0x54
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003088:	643a      	str	r2, [r7, #64]	@ 0x40
 800308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800308e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d119      	bne.n	800310c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030f8:	61ba      	str	r2, [r7, #24]
 80030fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800311a:	bf00      	nop
 800311c:	3754      	adds	r7, #84	@ 0x54
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b0c0      	sub	sp, #256	@ 0x100
 800312e:	af00      	add	r7, sp, #0
 8003130:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	ea40 0301 	orr.w	r3, r0, r1
 8003150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003180:	f021 010c 	bic.w	r1, r1, #12
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800318e:	430b      	orrs	r3, r1
 8003190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a2:	6999      	ldr	r1, [r3, #24]
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	ea40 0301 	orr.w	r3, r0, r1
 80031ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b8f      	ldr	r3, [pc, #572]	@ (80033f4 <UART_SetConfig+0x2cc>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d005      	beq.n	80031c8 <UART_SetConfig+0xa0>
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b8d      	ldr	r3, [pc, #564]	@ (80033f8 <UART_SetConfig+0x2d0>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d104      	bne.n	80031d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c8:	f7ff fe02 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 80031cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031d0:	e003      	b.n	80031da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031d2:	f7ff fde9 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 80031d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e4:	f040 810c 	bne.w	8003400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003202:	415b      	adcs	r3, r3
 8003204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800320a:	4621      	mov	r1, r4
 800320c:	eb12 0801 	adds.w	r8, r2, r1
 8003210:	4629      	mov	r1, r5
 8003212:	eb43 0901 	adc.w	r9, r3, r1
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322a:	4690      	mov	r8, r2
 800322c:	4699      	mov	r9, r3
 800322e:	4623      	mov	r3, r4
 8003230:	eb18 0303 	adds.w	r3, r8, r3
 8003234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003238:	462b      	mov	r3, r5
 800323a:	eb49 0303 	adc.w	r3, r9, r3
 800323e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800324e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003256:	460b      	mov	r3, r1
 8003258:	18db      	adds	r3, r3, r3
 800325a:	653b      	str	r3, [r7, #80]	@ 0x50
 800325c:	4613      	mov	r3, r2
 800325e:	eb42 0303 	adc.w	r3, r2, r3
 8003262:	657b      	str	r3, [r7, #84]	@ 0x54
 8003264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800326c:	f7fd f818 	bl	80002a0 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4b61      	ldr	r3, [pc, #388]	@ (80033fc <UART_SetConfig+0x2d4>)
 8003276:	fba3 2302 	umull	r2, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	011c      	lsls	r4, r3, #4
 800327e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003288:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800328c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003290:	4642      	mov	r2, r8
 8003292:	464b      	mov	r3, r9
 8003294:	1891      	adds	r1, r2, r2
 8003296:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003298:	415b      	adcs	r3, r3
 800329a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800329c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032a0:	4641      	mov	r1, r8
 80032a2:	eb12 0a01 	adds.w	sl, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb43 0b01 	adc.w	fp, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c0:	4692      	mov	sl, r2
 80032c2:	469b      	mov	fp, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	eb1a 0303 	adds.w	r3, sl, r3
 80032ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032ce:	464b      	mov	r3, r9
 80032d0:	eb4b 0303 	adc.w	r3, fp, r3
 80032d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032ec:	460b      	mov	r3, r1
 80032ee:	18db      	adds	r3, r3, r3
 80032f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032f2:	4613      	mov	r3, r2
 80032f4:	eb42 0303 	adc.w	r3, r2, r3
 80032f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003302:	f7fc ffcd 	bl	80002a0 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4611      	mov	r1, r2
 800330c:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <UART_SetConfig+0x2d4>)
 800330e:	fba3 2301 	umull	r2, r3, r3, r1
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2264      	movs	r2, #100	@ 0x64
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	1acb      	subs	r3, r1, r3
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003322:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <UART_SetConfig+0x2d4>)
 8003324:	fba3 2302 	umull	r2, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003330:	441c      	add	r4, r3
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800333c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	1891      	adds	r1, r2, r2
 800334a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800334c:	415b      	adcs	r3, r3
 800334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003354:	4641      	mov	r1, r8
 8003356:	1851      	adds	r1, r2, r1
 8003358:	6339      	str	r1, [r7, #48]	@ 0x30
 800335a:	4649      	mov	r1, r9
 800335c:	414b      	adcs	r3, r1
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800336c:	4659      	mov	r1, fp
 800336e:	00cb      	lsls	r3, r1, #3
 8003370:	4651      	mov	r1, sl
 8003372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003376:	4651      	mov	r1, sl
 8003378:	00ca      	lsls	r2, r1, #3
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	4603      	mov	r3, r0
 8003380:	4642      	mov	r2, r8
 8003382:	189b      	adds	r3, r3, r2
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003388:	464b      	mov	r3, r9
 800338a:	460a      	mov	r2, r1
 800338c:	eb42 0303 	adc.w	r3, r2, r3
 8003390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033a8:	460b      	mov	r3, r1
 80033aa:	18db      	adds	r3, r3, r3
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ae:	4613      	mov	r3, r2
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033be:	f7fc ff6f 	bl	80002a0 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <UART_SetConfig+0x2d4>)
 80033c8:	fba3 1302 	umull	r1, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2164      	movs	r1, #100	@ 0x64
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	3332      	adds	r3, #50	@ 0x32
 80033da:	4a08      	ldr	r2, [pc, #32]	@ (80033fc <UART_SetConfig+0x2d4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4422      	add	r2, r4
 80033ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033f0:	e106      	b.n	8003600 <UART_SetConfig+0x4d8>
 80033f2:	bf00      	nop
 80033f4:	40011000 	.word	0x40011000
 80033f8:	40011400 	.word	0x40011400
 80033fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800340a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800340e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003412:	4642      	mov	r2, r8
 8003414:	464b      	mov	r3, r9
 8003416:	1891      	adds	r1, r2, r2
 8003418:	6239      	str	r1, [r7, #32]
 800341a:	415b      	adcs	r3, r3
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
 800341e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003422:	4641      	mov	r1, r8
 8003424:	1854      	adds	r4, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb43 0501 	adc.w	r5, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003448:	464b      	mov	r3, r9
 800344a:	eb45 0303 	adc.w	r3, r5, r3
 800344e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800345e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346e:	4629      	mov	r1, r5
 8003470:	008b      	lsls	r3, r1, #2
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003478:	4621      	mov	r1, r4
 800347a:	008a      	lsls	r2, r1, #2
 800347c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003480:	f7fc ff0e 	bl	80002a0 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4b60      	ldr	r3, [pc, #384]	@ (800360c <UART_SetConfig+0x4e4>)
 800348a:	fba3 2302 	umull	r2, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	011c      	lsls	r4, r3, #4
 8003492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800349c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a4:	4642      	mov	r2, r8
 80034a6:	464b      	mov	r3, r9
 80034a8:	1891      	adds	r1, r2, r2
 80034aa:	61b9      	str	r1, [r7, #24]
 80034ac:	415b      	adcs	r3, r3
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b4:	4641      	mov	r1, r8
 80034b6:	1851      	adds	r1, r2, r1
 80034b8:	6139      	str	r1, [r7, #16]
 80034ba:	4649      	mov	r1, r9
 80034bc:	414b      	adcs	r3, r1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034cc:	4659      	mov	r1, fp
 80034ce:	00cb      	lsls	r3, r1, #3
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d6:	4651      	mov	r1, sl
 80034d8:	00ca      	lsls	r2, r1, #3
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	4642      	mov	r2, r8
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e8:	464b      	mov	r3, r9
 80034ea:	460a      	mov	r2, r1
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800350c:	4649      	mov	r1, r9
 800350e:	008b      	lsls	r3, r1, #2
 8003510:	4641      	mov	r1, r8
 8003512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003516:	4641      	mov	r1, r8
 8003518:	008a      	lsls	r2, r1, #2
 800351a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800351e:	f7fc febf 	bl	80002a0 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4611      	mov	r1, r2
 8003528:	4b38      	ldr	r3, [pc, #224]	@ (800360c <UART_SetConfig+0x4e4>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2264      	movs	r2, #100	@ 0x64
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	1acb      	subs	r3, r1, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	@ 0x32
 800353c:	4a33      	ldr	r2, [pc, #204]	@ (800360c <UART_SetConfig+0x4e4>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003548:	441c      	add	r4, r3
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354e:	2200      	movs	r2, #0
 8003550:	673b      	str	r3, [r7, #112]	@ 0x70
 8003552:	677a      	str	r2, [r7, #116]	@ 0x74
 8003554:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	1891      	adds	r1, r2, r2
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	415b      	adcs	r3, r3
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003568:	4641      	mov	r1, r8
 800356a:	1851      	adds	r1, r2, r1
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	4649      	mov	r1, r9
 8003570:	414b      	adcs	r3, r1
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003580:	4659      	mov	r1, fp
 8003582:	00cb      	lsls	r3, r1, #3
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358a:	4651      	mov	r1, sl
 800358c:	00ca      	lsls	r2, r1, #3
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	4603      	mov	r3, r0
 8003594:	4642      	mov	r2, r8
 8003596:	189b      	adds	r3, r3, r2
 8003598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800359a:	464b      	mov	r3, r9
 800359c:	460a      	mov	r2, r1
 800359e:	eb42 0303 	adc.w	r3, r2, r3
 80035a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035bc:	4649      	mov	r1, r9
 80035be:	008b      	lsls	r3, r1, #2
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c6:	4641      	mov	r1, r8
 80035c8:	008a      	lsls	r2, r1, #2
 80035ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035ce:	f7fc fe67 	bl	80002a0 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <UART_SetConfig+0x4e4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	@ 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	3332      	adds	r3, #50	@ 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <UART_SetConfig+0x4e4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003606:	46bd      	mov	sp, r7
 8003608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360c:	51eb851f 	.word	0x51eb851f

08003610 <siprintf>:
 8003610:	b40e      	push	{r1, r2, r3}
 8003612:	b500      	push	{lr}
 8003614:	b09c      	sub	sp, #112	@ 0x70
 8003616:	ab1d      	add	r3, sp, #116	@ 0x74
 8003618:	9002      	str	r0, [sp, #8]
 800361a:	9006      	str	r0, [sp, #24]
 800361c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003620:	4809      	ldr	r0, [pc, #36]	@ (8003648 <siprintf+0x38>)
 8003622:	9107      	str	r1, [sp, #28]
 8003624:	9104      	str	r1, [sp, #16]
 8003626:	4909      	ldr	r1, [pc, #36]	@ (800364c <siprintf+0x3c>)
 8003628:	f853 2b04 	ldr.w	r2, [r3], #4
 800362c:	9105      	str	r1, [sp, #20]
 800362e:	6800      	ldr	r0, [r0, #0]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	a902      	add	r1, sp, #8
 8003634:	f000 f994 	bl	8003960 <_svfiprintf_r>
 8003638:	9b02      	ldr	r3, [sp, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	b01c      	add	sp, #112	@ 0x70
 8003640:	f85d eb04 	ldr.w	lr, [sp], #4
 8003644:	b003      	add	sp, #12
 8003646:	4770      	bx	lr
 8003648:	2000000c 	.word	0x2000000c
 800364c:	ffff0208 	.word	0xffff0208

08003650 <memset>:
 8003650:	4402      	add	r2, r0
 8003652:	4603      	mov	r3, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <__errno>:
 8003660:	4b01      	ldr	r3, [pc, #4]	@ (8003668 <__errno+0x8>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000000c 	.word	0x2000000c

0800366c <__libc_init_array>:
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	4d0d      	ldr	r5, [pc, #52]	@ (80036a4 <__libc_init_array+0x38>)
 8003670:	4c0d      	ldr	r4, [pc, #52]	@ (80036a8 <__libc_init_array+0x3c>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	2600      	movs	r6, #0
 8003678:	42a6      	cmp	r6, r4
 800367a:	d109      	bne.n	8003690 <__libc_init_array+0x24>
 800367c:	4d0b      	ldr	r5, [pc, #44]	@ (80036ac <__libc_init_array+0x40>)
 800367e:	4c0c      	ldr	r4, [pc, #48]	@ (80036b0 <__libc_init_array+0x44>)
 8003680:	f000 fc66 	bl	8003f50 <_init>
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	2600      	movs	r6, #0
 800368a:	42a6      	cmp	r6, r4
 800368c:	d105      	bne.n	800369a <__libc_init_array+0x2e>
 800368e:	bd70      	pop	{r4, r5, r6, pc}
 8003690:	f855 3b04 	ldr.w	r3, [r5], #4
 8003694:	4798      	blx	r3
 8003696:	3601      	adds	r6, #1
 8003698:	e7ee      	b.n	8003678 <__libc_init_array+0xc>
 800369a:	f855 3b04 	ldr.w	r3, [r5], #4
 800369e:	4798      	blx	r3
 80036a0:	3601      	adds	r6, #1
 80036a2:	e7f2      	b.n	800368a <__libc_init_array+0x1e>
 80036a4:	08003fd0 	.word	0x08003fd0
 80036a8:	08003fd0 	.word	0x08003fd0
 80036ac:	08003fd0 	.word	0x08003fd0
 80036b0:	08003fd4 	.word	0x08003fd4

080036b4 <__retarget_lock_acquire_recursive>:
 80036b4:	4770      	bx	lr

080036b6 <__retarget_lock_release_recursive>:
 80036b6:	4770      	bx	lr

080036b8 <_free_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4605      	mov	r5, r0
 80036bc:	2900      	cmp	r1, #0
 80036be:	d041      	beq.n	8003744 <_free_r+0x8c>
 80036c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c4:	1f0c      	subs	r4, r1, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfb8      	it	lt
 80036ca:	18e4      	addlt	r4, r4, r3
 80036cc:	f000 f8e0 	bl	8003890 <__malloc_lock>
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <_free_r+0x90>)
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	b933      	cbnz	r3, 80036e4 <_free_r+0x2c>
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	6014      	str	r4, [r2, #0]
 80036da:	4628      	mov	r0, r5
 80036dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e0:	f000 b8dc 	b.w	800389c <__malloc_unlock>
 80036e4:	42a3      	cmp	r3, r4
 80036e6:	d908      	bls.n	80036fa <_free_r+0x42>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	1821      	adds	r1, r4, r0
 80036ec:	428b      	cmp	r3, r1
 80036ee:	bf01      	itttt	eq
 80036f0:	6819      	ldreq	r1, [r3, #0]
 80036f2:	685b      	ldreq	r3, [r3, #4]
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	e7ed      	b.n	80036d6 <_free_r+0x1e>
 80036fa:	461a      	mov	r2, r3
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b10b      	cbz	r3, 8003704 <_free_r+0x4c>
 8003700:	42a3      	cmp	r3, r4
 8003702:	d9fa      	bls.n	80036fa <_free_r+0x42>
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	1850      	adds	r0, r2, r1
 8003708:	42a0      	cmp	r0, r4
 800370a:	d10b      	bne.n	8003724 <_free_r+0x6c>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	4401      	add	r1, r0
 8003710:	1850      	adds	r0, r2, r1
 8003712:	4283      	cmp	r3, r0
 8003714:	6011      	str	r1, [r2, #0]
 8003716:	d1e0      	bne.n	80036da <_free_r+0x22>
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	6053      	str	r3, [r2, #4]
 800371e:	4408      	add	r0, r1
 8003720:	6010      	str	r0, [r2, #0]
 8003722:	e7da      	b.n	80036da <_free_r+0x22>
 8003724:	d902      	bls.n	800372c <_free_r+0x74>
 8003726:	230c      	movs	r3, #12
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	e7d6      	b.n	80036da <_free_r+0x22>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	1821      	adds	r1, r4, r0
 8003730:	428b      	cmp	r3, r1
 8003732:	bf04      	itt	eq
 8003734:	6819      	ldreq	r1, [r3, #0]
 8003736:	685b      	ldreq	r3, [r3, #4]
 8003738:	6063      	str	r3, [r4, #4]
 800373a:	bf04      	itt	eq
 800373c:	1809      	addeq	r1, r1, r0
 800373e:	6021      	streq	r1, [r4, #0]
 8003740:	6054      	str	r4, [r2, #4]
 8003742:	e7ca      	b.n	80036da <_free_r+0x22>
 8003744:	bd38      	pop	{r3, r4, r5, pc}
 8003746:	bf00      	nop
 8003748:	20000b30 	.word	0x20000b30

0800374c <sbrk_aligned>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4e0f      	ldr	r6, [pc, #60]	@ (800378c <sbrk_aligned+0x40>)
 8003750:	460c      	mov	r4, r1
 8003752:	6831      	ldr	r1, [r6, #0]
 8003754:	4605      	mov	r5, r0
 8003756:	b911      	cbnz	r1, 800375e <sbrk_aligned+0x12>
 8003758:	f000 fba6 	bl	8003ea8 <_sbrk_r>
 800375c:	6030      	str	r0, [r6, #0]
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f000 fba1 	bl	8003ea8 <_sbrk_r>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	d103      	bne.n	8003772 <sbrk_aligned+0x26>
 800376a:	f04f 34ff 	mov.w	r4, #4294967295
 800376e:	4620      	mov	r0, r4
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d0f8      	beq.n	800376e <sbrk_aligned+0x22>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4628      	mov	r0, r5
 8003780:	f000 fb92 	bl	8003ea8 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d1f2      	bne.n	800376e <sbrk_aligned+0x22>
 8003788:	e7ef      	b.n	800376a <sbrk_aligned+0x1e>
 800378a:	bf00      	nop
 800378c:	20000b2c 	.word	0x20000b2c

08003790 <_malloc_r>:
 8003790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003794:	1ccd      	adds	r5, r1, #3
 8003796:	f025 0503 	bic.w	r5, r5, #3
 800379a:	3508      	adds	r5, #8
 800379c:	2d0c      	cmp	r5, #12
 800379e:	bf38      	it	cc
 80037a0:	250c      	movcc	r5, #12
 80037a2:	2d00      	cmp	r5, #0
 80037a4:	4606      	mov	r6, r0
 80037a6:	db01      	blt.n	80037ac <_malloc_r+0x1c>
 80037a8:	42a9      	cmp	r1, r5
 80037aa:	d904      	bls.n	80037b6 <_malloc_r+0x26>
 80037ac:	230c      	movs	r3, #12
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	2000      	movs	r0, #0
 80037b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800388c <_malloc_r+0xfc>
 80037ba:	f000 f869 	bl	8003890 <__malloc_lock>
 80037be:	f8d8 3000 	ldr.w	r3, [r8]
 80037c2:	461c      	mov	r4, r3
 80037c4:	bb44      	cbnz	r4, 8003818 <_malloc_r+0x88>
 80037c6:	4629      	mov	r1, r5
 80037c8:	4630      	mov	r0, r6
 80037ca:	f7ff ffbf 	bl	800374c <sbrk_aligned>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	4604      	mov	r4, r0
 80037d2:	d158      	bne.n	8003886 <_malloc_r+0xf6>
 80037d4:	f8d8 4000 	ldr.w	r4, [r8]
 80037d8:	4627      	mov	r7, r4
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d143      	bne.n	8003866 <_malloc_r+0xd6>
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d04b      	beq.n	800387a <_malloc_r+0xea>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	eb04 0903 	add.w	r9, r4, r3
 80037ec:	f000 fb5c 	bl	8003ea8 <_sbrk_r>
 80037f0:	4581      	cmp	r9, r0
 80037f2:	d142      	bne.n	800387a <_malloc_r+0xea>
 80037f4:	6821      	ldr	r1, [r4, #0]
 80037f6:	1a6d      	subs	r5, r5, r1
 80037f8:	4629      	mov	r1, r5
 80037fa:	4630      	mov	r0, r6
 80037fc:	f7ff ffa6 	bl	800374c <sbrk_aligned>
 8003800:	3001      	adds	r0, #1
 8003802:	d03a      	beq.n	800387a <_malloc_r+0xea>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	442b      	add	r3, r5
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	f8d8 3000 	ldr.w	r3, [r8]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	bb62      	cbnz	r2, 800386c <_malloc_r+0xdc>
 8003812:	f8c8 7000 	str.w	r7, [r8]
 8003816:	e00f      	b.n	8003838 <_malloc_r+0xa8>
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	1b52      	subs	r2, r2, r5
 800381c:	d420      	bmi.n	8003860 <_malloc_r+0xd0>
 800381e:	2a0b      	cmp	r2, #11
 8003820:	d917      	bls.n	8003852 <_malloc_r+0xc2>
 8003822:	1961      	adds	r1, r4, r5
 8003824:	42a3      	cmp	r3, r4
 8003826:	6025      	str	r5, [r4, #0]
 8003828:	bf18      	it	ne
 800382a:	6059      	strne	r1, [r3, #4]
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	bf08      	it	eq
 8003830:	f8c8 1000 	streq.w	r1, [r8]
 8003834:	5162      	str	r2, [r4, r5]
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f82f 	bl	800389c <__malloc_unlock>
 800383e:	f104 000b 	add.w	r0, r4, #11
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	f020 0007 	bic.w	r0, r0, #7
 8003848:	1ac2      	subs	r2, r0, r3
 800384a:	bf1c      	itt	ne
 800384c:	1a1b      	subne	r3, r3, r0
 800384e:	50a3      	strne	r3, [r4, r2]
 8003850:	e7af      	b.n	80037b2 <_malloc_r+0x22>
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	42a3      	cmp	r3, r4
 8003856:	bf0c      	ite	eq
 8003858:	f8c8 2000 	streq.w	r2, [r8]
 800385c:	605a      	strne	r2, [r3, #4]
 800385e:	e7eb      	b.n	8003838 <_malloc_r+0xa8>
 8003860:	4623      	mov	r3, r4
 8003862:	6864      	ldr	r4, [r4, #4]
 8003864:	e7ae      	b.n	80037c4 <_malloc_r+0x34>
 8003866:	463c      	mov	r4, r7
 8003868:	687f      	ldr	r7, [r7, #4]
 800386a:	e7b6      	b.n	80037da <_malloc_r+0x4a>
 800386c:	461a      	mov	r2, r3
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	42a3      	cmp	r3, r4
 8003872:	d1fb      	bne.n	800386c <_malloc_r+0xdc>
 8003874:	2300      	movs	r3, #0
 8003876:	6053      	str	r3, [r2, #4]
 8003878:	e7de      	b.n	8003838 <_malloc_r+0xa8>
 800387a:	230c      	movs	r3, #12
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	4630      	mov	r0, r6
 8003880:	f000 f80c 	bl	800389c <__malloc_unlock>
 8003884:	e794      	b.n	80037b0 <_malloc_r+0x20>
 8003886:	6005      	str	r5, [r0, #0]
 8003888:	e7d6      	b.n	8003838 <_malloc_r+0xa8>
 800388a:	bf00      	nop
 800388c:	20000b30 	.word	0x20000b30

08003890 <__malloc_lock>:
 8003890:	4801      	ldr	r0, [pc, #4]	@ (8003898 <__malloc_lock+0x8>)
 8003892:	f7ff bf0f 	b.w	80036b4 <__retarget_lock_acquire_recursive>
 8003896:	bf00      	nop
 8003898:	20000b28 	.word	0x20000b28

0800389c <__malloc_unlock>:
 800389c:	4801      	ldr	r0, [pc, #4]	@ (80038a4 <__malloc_unlock+0x8>)
 800389e:	f7ff bf0a 	b.w	80036b6 <__retarget_lock_release_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000b28 	.word	0x20000b28

080038a8 <__ssputs_r>:
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	688e      	ldr	r6, [r1, #8]
 80038ae:	461f      	mov	r7, r3
 80038b0:	42be      	cmp	r6, r7
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	4682      	mov	sl, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	4690      	mov	r8, r2
 80038ba:	d82d      	bhi.n	8003918 <__ssputs_r+0x70>
 80038bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038c4:	d026      	beq.n	8003914 <__ssputs_r+0x6c>
 80038c6:	6965      	ldr	r5, [r4, #20]
 80038c8:	6909      	ldr	r1, [r1, #16]
 80038ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038ce:	eba3 0901 	sub.w	r9, r3, r1
 80038d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038d6:	1c7b      	adds	r3, r7, #1
 80038d8:	444b      	add	r3, r9
 80038da:	106d      	asrs	r5, r5, #1
 80038dc:	429d      	cmp	r5, r3
 80038de:	bf38      	it	cc
 80038e0:	461d      	movcc	r5, r3
 80038e2:	0553      	lsls	r3, r2, #21
 80038e4:	d527      	bpl.n	8003936 <__ssputs_r+0x8e>
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7ff ff52 	bl	8003790 <_malloc_r>
 80038ec:	4606      	mov	r6, r0
 80038ee:	b360      	cbz	r0, 800394a <__ssputs_r+0xa2>
 80038f0:	6921      	ldr	r1, [r4, #16]
 80038f2:	464a      	mov	r2, r9
 80038f4:	f000 fae8 	bl	8003ec8 <memcpy>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	6126      	str	r6, [r4, #16]
 8003906:	6165      	str	r5, [r4, #20]
 8003908:	444e      	add	r6, r9
 800390a:	eba5 0509 	sub.w	r5, r5, r9
 800390e:	6026      	str	r6, [r4, #0]
 8003910:	60a5      	str	r5, [r4, #8]
 8003912:	463e      	mov	r6, r7
 8003914:	42be      	cmp	r6, r7
 8003916:	d900      	bls.n	800391a <__ssputs_r+0x72>
 8003918:	463e      	mov	r6, r7
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	4632      	mov	r2, r6
 800391e:	4641      	mov	r1, r8
 8003920:	f000 faa8 	bl	8003e74 <memmove>
 8003924:	68a3      	ldr	r3, [r4, #8]
 8003926:	1b9b      	subs	r3, r3, r6
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	4433      	add	r3, r6
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	2000      	movs	r0, #0
 8003932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003936:	462a      	mov	r2, r5
 8003938:	f000 fad4 	bl	8003ee4 <_realloc_r>
 800393c:	4606      	mov	r6, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d1e0      	bne.n	8003904 <__ssputs_r+0x5c>
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	4650      	mov	r0, sl
 8003946:	f7ff feb7 	bl	80036b8 <_free_r>
 800394a:	230c      	movs	r3, #12
 800394c:	f8ca 3000 	str.w	r3, [sl]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	e7e9      	b.n	8003932 <__ssputs_r+0x8a>
	...

08003960 <_svfiprintf_r>:
 8003960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003964:	4698      	mov	r8, r3
 8003966:	898b      	ldrh	r3, [r1, #12]
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	b09d      	sub	sp, #116	@ 0x74
 800396c:	4607      	mov	r7, r0
 800396e:	460d      	mov	r5, r1
 8003970:	4614      	mov	r4, r2
 8003972:	d510      	bpl.n	8003996 <_svfiprintf_r+0x36>
 8003974:	690b      	ldr	r3, [r1, #16]
 8003976:	b973      	cbnz	r3, 8003996 <_svfiprintf_r+0x36>
 8003978:	2140      	movs	r1, #64	@ 0x40
 800397a:	f7ff ff09 	bl	8003790 <_malloc_r>
 800397e:	6028      	str	r0, [r5, #0]
 8003980:	6128      	str	r0, [r5, #16]
 8003982:	b930      	cbnz	r0, 8003992 <_svfiprintf_r+0x32>
 8003984:	230c      	movs	r3, #12
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	b01d      	add	sp, #116	@ 0x74
 800398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003992:	2340      	movs	r3, #64	@ 0x40
 8003994:	616b      	str	r3, [r5, #20]
 8003996:	2300      	movs	r3, #0
 8003998:	9309      	str	r3, [sp, #36]	@ 0x24
 800399a:	2320      	movs	r3, #32
 800399c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a4:	2330      	movs	r3, #48	@ 0x30
 80039a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b44 <_svfiprintf_r+0x1e4>
 80039aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039ae:	f04f 0901 	mov.w	r9, #1
 80039b2:	4623      	mov	r3, r4
 80039b4:	469a      	mov	sl, r3
 80039b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ba:	b10a      	cbz	r2, 80039c0 <_svfiprintf_r+0x60>
 80039bc:	2a25      	cmp	r2, #37	@ 0x25
 80039be:	d1f9      	bne.n	80039b4 <_svfiprintf_r+0x54>
 80039c0:	ebba 0b04 	subs.w	fp, sl, r4
 80039c4:	d00b      	beq.n	80039de <_svfiprintf_r+0x7e>
 80039c6:	465b      	mov	r3, fp
 80039c8:	4622      	mov	r2, r4
 80039ca:	4629      	mov	r1, r5
 80039cc:	4638      	mov	r0, r7
 80039ce:	f7ff ff6b 	bl	80038a8 <__ssputs_r>
 80039d2:	3001      	adds	r0, #1
 80039d4:	f000 80a7 	beq.w	8003b26 <_svfiprintf_r+0x1c6>
 80039d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039da:	445a      	add	r2, fp
 80039dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80039de:	f89a 3000 	ldrb.w	r3, [sl]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 809f 	beq.w	8003b26 <_svfiprintf_r+0x1c6>
 80039e8:	2300      	movs	r3, #0
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f2:	f10a 0a01 	add.w	sl, sl, #1
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	9307      	str	r3, [sp, #28]
 80039fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a00:	4654      	mov	r4, sl
 8003a02:	2205      	movs	r2, #5
 8003a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a08:	484e      	ldr	r0, [pc, #312]	@ (8003b44 <_svfiprintf_r+0x1e4>)
 8003a0a:	f7fc fbf9 	bl	8000200 <memchr>
 8003a0e:	9a04      	ldr	r2, [sp, #16]
 8003a10:	b9d8      	cbnz	r0, 8003a4a <_svfiprintf_r+0xea>
 8003a12:	06d0      	lsls	r0, r2, #27
 8003a14:	bf44      	itt	mi
 8003a16:	2320      	movmi	r3, #32
 8003a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a1c:	0711      	lsls	r1, r2, #28
 8003a1e:	bf44      	itt	mi
 8003a20:	232b      	movmi	r3, #43	@ 0x2b
 8003a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a26:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2c:	d015      	beq.n	8003a5a <_svfiprintf_r+0xfa>
 8003a2e:	9a07      	ldr	r2, [sp, #28]
 8003a30:	4654      	mov	r4, sl
 8003a32:	2000      	movs	r0, #0
 8003a34:	f04f 0c0a 	mov.w	ip, #10
 8003a38:	4621      	mov	r1, r4
 8003a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a3e:	3b30      	subs	r3, #48	@ 0x30
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	d94b      	bls.n	8003adc <_svfiprintf_r+0x17c>
 8003a44:	b1b0      	cbz	r0, 8003a74 <_svfiprintf_r+0x114>
 8003a46:	9207      	str	r2, [sp, #28]
 8003a48:	e014      	b.n	8003a74 <_svfiprintf_r+0x114>
 8003a4a:	eba0 0308 	sub.w	r3, r0, r8
 8003a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	46a2      	mov	sl, r4
 8003a58:	e7d2      	b.n	8003a00 <_svfiprintf_r+0xa0>
 8003a5a:	9b03      	ldr	r3, [sp, #12]
 8003a5c:	1d19      	adds	r1, r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	9103      	str	r1, [sp, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfbb      	ittet	lt
 8003a66:	425b      	neglt	r3, r3
 8003a68:	f042 0202 	orrlt.w	r2, r2, #2
 8003a6c:	9307      	strge	r3, [sp, #28]
 8003a6e:	9307      	strlt	r3, [sp, #28]
 8003a70:	bfb8      	it	lt
 8003a72:	9204      	strlt	r2, [sp, #16]
 8003a74:	7823      	ldrb	r3, [r4, #0]
 8003a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a78:	d10a      	bne.n	8003a90 <_svfiprintf_r+0x130>
 8003a7a:	7863      	ldrb	r3, [r4, #1]
 8003a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a7e:	d132      	bne.n	8003ae6 <_svfiprintf_r+0x186>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	9203      	str	r2, [sp, #12]
 8003a88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a8c:	3402      	adds	r4, #2
 8003a8e:	9305      	str	r3, [sp, #20]
 8003a90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b54 <_svfiprintf_r+0x1f4>
 8003a94:	7821      	ldrb	r1, [r4, #0]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4650      	mov	r0, sl
 8003a9a:	f7fc fbb1 	bl	8000200 <memchr>
 8003a9e:	b138      	cbz	r0, 8003ab0 <_svfiprintf_r+0x150>
 8003aa0:	9b04      	ldr	r3, [sp, #16]
 8003aa2:	eba0 000a 	sub.w	r0, r0, sl
 8003aa6:	2240      	movs	r2, #64	@ 0x40
 8003aa8:	4082      	lsls	r2, r0
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	3401      	adds	r4, #1
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	4824      	ldr	r0, [pc, #144]	@ (8003b48 <_svfiprintf_r+0x1e8>)
 8003ab6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aba:	2206      	movs	r2, #6
 8003abc:	f7fc fba0 	bl	8000200 <memchr>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d036      	beq.n	8003b32 <_svfiprintf_r+0x1d2>
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <_svfiprintf_r+0x1ec>)
 8003ac6:	bb1b      	cbnz	r3, 8003b10 <_svfiprintf_r+0x1b0>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	3307      	adds	r3, #7
 8003acc:	f023 0307 	bic.w	r3, r3, #7
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad6:	4433      	add	r3, r6
 8003ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ada:	e76a      	b.n	80039b2 <_svfiprintf_r+0x52>
 8003adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	e7a8      	b.n	8003a38 <_svfiprintf_r+0xd8>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	3401      	adds	r4, #1
 8003aea:	9305      	str	r3, [sp, #20]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0c0a 	mov.w	ip, #10
 8003af2:	4620      	mov	r0, r4
 8003af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003af8:	3a30      	subs	r2, #48	@ 0x30
 8003afa:	2a09      	cmp	r2, #9
 8003afc:	d903      	bls.n	8003b06 <_svfiprintf_r+0x1a6>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0c6      	beq.n	8003a90 <_svfiprintf_r+0x130>
 8003b02:	9105      	str	r1, [sp, #20]
 8003b04:	e7c4      	b.n	8003a90 <_svfiprintf_r+0x130>
 8003b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e7f0      	b.n	8003af2 <_svfiprintf_r+0x192>
 8003b10:	ab03      	add	r3, sp, #12
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	462a      	mov	r2, r5
 8003b16:	4b0e      	ldr	r3, [pc, #56]	@ (8003b50 <_svfiprintf_r+0x1f0>)
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f3af 8000 	nop.w
 8003b20:	1c42      	adds	r2, r0, #1
 8003b22:	4606      	mov	r6, r0
 8003b24:	d1d6      	bne.n	8003ad4 <_svfiprintf_r+0x174>
 8003b26:	89ab      	ldrh	r3, [r5, #12]
 8003b28:	065b      	lsls	r3, r3, #25
 8003b2a:	f53f af2d 	bmi.w	8003988 <_svfiprintf_r+0x28>
 8003b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b30:	e72c      	b.n	800398c <_svfiprintf_r+0x2c>
 8003b32:	ab03      	add	r3, sp, #12
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	462a      	mov	r2, r5
 8003b38:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <_svfiprintf_r+0x1f0>)
 8003b3a:	a904      	add	r1, sp, #16
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f000 f879 	bl	8003c34 <_printf_i>
 8003b42:	e7ed      	b.n	8003b20 <_svfiprintf_r+0x1c0>
 8003b44:	08003f94 	.word	0x08003f94
 8003b48:	08003f9e 	.word	0x08003f9e
 8003b4c:	00000000 	.word	0x00000000
 8003b50:	080038a9 	.word	0x080038a9
 8003b54:	08003f9a 	.word	0x08003f9a

08003b58 <_printf_common>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	4698      	mov	r8, r3
 8003b60:	688a      	ldr	r2, [r1, #8]
 8003b62:	690b      	ldr	r3, [r1, #16]
 8003b64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	bfb8      	it	lt
 8003b6c:	4613      	movlt	r3, r2
 8003b6e:	6033      	str	r3, [r6, #0]
 8003b70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b74:	4607      	mov	r7, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	b10a      	cbz	r2, 8003b7e <_printf_common+0x26>
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6033      	str	r3, [r6, #0]
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	0699      	lsls	r1, r3, #26
 8003b82:	bf42      	ittt	mi
 8003b84:	6833      	ldrmi	r3, [r6, #0]
 8003b86:	3302      	addmi	r3, #2
 8003b88:	6033      	strmi	r3, [r6, #0]
 8003b8a:	6825      	ldr	r5, [r4, #0]
 8003b8c:	f015 0506 	ands.w	r5, r5, #6
 8003b90:	d106      	bne.n	8003ba0 <_printf_common+0x48>
 8003b92:	f104 0a19 	add.w	sl, r4, #25
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	6832      	ldr	r2, [r6, #0]
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	42ab      	cmp	r3, r5
 8003b9e:	dc26      	bgt.n	8003bee <_printf_common+0x96>
 8003ba0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	3b00      	subs	r3, #0
 8003ba8:	bf18      	it	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	0692      	lsls	r2, r2, #26
 8003bae:	d42b      	bmi.n	8003c08 <_printf_common+0xb0>
 8003bb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d01e      	beq.n	8003bfc <_printf_common+0xa4>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	6922      	ldr	r2, [r4, #16]
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf02      	ittt	eq
 8003bca:	68e5      	ldreq	r5, [r4, #12]
 8003bcc:	6833      	ldreq	r3, [r6, #0]
 8003bce:	1aed      	subeq	r5, r5, r3
 8003bd0:	68a3      	ldr	r3, [r4, #8]
 8003bd2:	bf0c      	ite	eq
 8003bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bd8:	2500      	movne	r5, #0
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bfc4      	itt	gt
 8003bde:	1a9b      	subgt	r3, r3, r2
 8003be0:	18ed      	addgt	r5, r5, r3
 8003be2:	2600      	movs	r6, #0
 8003be4:	341a      	adds	r4, #26
 8003be6:	42b5      	cmp	r5, r6
 8003be8:	d11a      	bne.n	8003c20 <_printf_common+0xc8>
 8003bea:	2000      	movs	r0, #0
 8003bec:	e008      	b.n	8003c00 <_printf_common+0xa8>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4652      	mov	r2, sl
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	47c8      	blx	r9
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d103      	bne.n	8003c04 <_printf_common+0xac>
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c04:	3501      	adds	r5, #1
 8003c06:	e7c6      	b.n	8003b96 <_printf_common+0x3e>
 8003c08:	18e1      	adds	r1, r4, r3
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	2030      	movs	r0, #48	@ 0x30
 8003c0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c12:	4422      	add	r2, r4
 8003c14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	e7c7      	b.n	8003bb0 <_printf_common+0x58>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4622      	mov	r2, r4
 8003c24:	4641      	mov	r1, r8
 8003c26:	4638      	mov	r0, r7
 8003c28:	47c8      	blx	r9
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d0e6      	beq.n	8003bfc <_printf_common+0xa4>
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7d9      	b.n	8003be6 <_printf_common+0x8e>
	...

08003c34 <_printf_i>:
 8003c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	7e0f      	ldrb	r7, [r1, #24]
 8003c3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c3c:	2f78      	cmp	r7, #120	@ 0x78
 8003c3e:	4691      	mov	r9, r2
 8003c40:	4680      	mov	r8, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	469a      	mov	sl, r3
 8003c46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c4a:	d807      	bhi.n	8003c5c <_printf_i+0x28>
 8003c4c:	2f62      	cmp	r7, #98	@ 0x62
 8003c4e:	d80a      	bhi.n	8003c66 <_printf_i+0x32>
 8003c50:	2f00      	cmp	r7, #0
 8003c52:	f000 80d2 	beq.w	8003dfa <_printf_i+0x1c6>
 8003c56:	2f58      	cmp	r7, #88	@ 0x58
 8003c58:	f000 80b9 	beq.w	8003dce <_printf_i+0x19a>
 8003c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c64:	e03a      	b.n	8003cdc <_printf_i+0xa8>
 8003c66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c6a:	2b15      	cmp	r3, #21
 8003c6c:	d8f6      	bhi.n	8003c5c <_printf_i+0x28>
 8003c6e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c74 <_printf_i+0x40>)
 8003c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c74:	08003ccd 	.word	0x08003ccd
 8003c78:	08003ce1 	.word	0x08003ce1
 8003c7c:	08003c5d 	.word	0x08003c5d
 8003c80:	08003c5d 	.word	0x08003c5d
 8003c84:	08003c5d 	.word	0x08003c5d
 8003c88:	08003c5d 	.word	0x08003c5d
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003c5d 	.word	0x08003c5d
 8003c94:	08003c5d 	.word	0x08003c5d
 8003c98:	08003c5d 	.word	0x08003c5d
 8003c9c:	08003c5d 	.word	0x08003c5d
 8003ca0:	08003de1 	.word	0x08003de1
 8003ca4:	08003d0b 	.word	0x08003d0b
 8003ca8:	08003d9b 	.word	0x08003d9b
 8003cac:	08003c5d 	.word	0x08003c5d
 8003cb0:	08003c5d 	.word	0x08003c5d
 8003cb4:	08003e03 	.word	0x08003e03
 8003cb8:	08003c5d 	.word	0x08003c5d
 8003cbc:	08003d0b 	.word	0x08003d0b
 8003cc0:	08003c5d 	.word	0x08003c5d
 8003cc4:	08003c5d 	.word	0x08003c5d
 8003cc8:	08003da3 	.word	0x08003da3
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6032      	str	r2, [r6, #0]
 8003cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e09d      	b.n	8003e1c <_printf_i+0x1e8>
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	6031      	str	r1, [r6, #0]
 8003ce8:	0606      	lsls	r6, r0, #24
 8003cea:	d501      	bpl.n	8003cf0 <_printf_i+0xbc>
 8003cec:	681d      	ldr	r5, [r3, #0]
 8003cee:	e003      	b.n	8003cf8 <_printf_i+0xc4>
 8003cf0:	0645      	lsls	r5, r0, #25
 8003cf2:	d5fb      	bpl.n	8003cec <_printf_i+0xb8>
 8003cf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	da03      	bge.n	8003d04 <_printf_i+0xd0>
 8003cfc:	232d      	movs	r3, #45	@ 0x2d
 8003cfe:	426d      	negs	r5, r5
 8003d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d04:	4859      	ldr	r0, [pc, #356]	@ (8003e6c <_printf_i+0x238>)
 8003d06:	230a      	movs	r3, #10
 8003d08:	e011      	b.n	8003d2e <_printf_i+0xfa>
 8003d0a:	6821      	ldr	r1, [r4, #0]
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	0608      	lsls	r0, r1, #24
 8003d10:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d14:	d402      	bmi.n	8003d1c <_printf_i+0xe8>
 8003d16:	0649      	lsls	r1, r1, #25
 8003d18:	bf48      	it	mi
 8003d1a:	b2ad      	uxthmi	r5, r5
 8003d1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d1e:	4853      	ldr	r0, [pc, #332]	@ (8003e6c <_printf_i+0x238>)
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	bf14      	ite	ne
 8003d24:	230a      	movne	r3, #10
 8003d26:	2308      	moveq	r3, #8
 8003d28:	2100      	movs	r1, #0
 8003d2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d2e:	6866      	ldr	r6, [r4, #4]
 8003d30:	60a6      	str	r6, [r4, #8]
 8003d32:	2e00      	cmp	r6, #0
 8003d34:	bfa2      	ittt	ge
 8003d36:	6821      	ldrge	r1, [r4, #0]
 8003d38:	f021 0104 	bicge.w	r1, r1, #4
 8003d3c:	6021      	strge	r1, [r4, #0]
 8003d3e:	b90d      	cbnz	r5, 8003d44 <_printf_i+0x110>
 8003d40:	2e00      	cmp	r6, #0
 8003d42:	d04b      	beq.n	8003ddc <_printf_i+0x1a8>
 8003d44:	4616      	mov	r6, r2
 8003d46:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d4a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d4e:	5dc7      	ldrb	r7, [r0, r7]
 8003d50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d54:	462f      	mov	r7, r5
 8003d56:	42bb      	cmp	r3, r7
 8003d58:	460d      	mov	r5, r1
 8003d5a:	d9f4      	bls.n	8003d46 <_printf_i+0x112>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d10b      	bne.n	8003d78 <_printf_i+0x144>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	07df      	lsls	r7, r3, #31
 8003d64:	d508      	bpl.n	8003d78 <_printf_i+0x144>
 8003d66:	6923      	ldr	r3, [r4, #16]
 8003d68:	6861      	ldr	r1, [r4, #4]
 8003d6a:	4299      	cmp	r1, r3
 8003d6c:	bfde      	ittt	le
 8003d6e:	2330      	movle	r3, #48	@ 0x30
 8003d70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d78:	1b92      	subs	r2, r2, r6
 8003d7a:	6122      	str	r2, [r4, #16]
 8003d7c:	f8cd a000 	str.w	sl, [sp]
 8003d80:	464b      	mov	r3, r9
 8003d82:	aa03      	add	r2, sp, #12
 8003d84:	4621      	mov	r1, r4
 8003d86:	4640      	mov	r0, r8
 8003d88:	f7ff fee6 	bl	8003b58 <_printf_common>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d14a      	bne.n	8003e26 <_printf_i+0x1f2>
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	b004      	add	sp, #16
 8003d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	f043 0320 	orr.w	r3, r3, #32
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	4833      	ldr	r0, [pc, #204]	@ (8003e70 <_printf_i+0x23c>)
 8003da4:	2778      	movs	r7, #120	@ 0x78
 8003da6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	6831      	ldr	r1, [r6, #0]
 8003dae:	061f      	lsls	r7, r3, #24
 8003db0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003db4:	d402      	bmi.n	8003dbc <_printf_i+0x188>
 8003db6:	065f      	lsls	r7, r3, #25
 8003db8:	bf48      	it	mi
 8003dba:	b2ad      	uxthmi	r5, r5
 8003dbc:	6031      	str	r1, [r6, #0]
 8003dbe:	07d9      	lsls	r1, r3, #31
 8003dc0:	bf44      	itt	mi
 8003dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8003dc6:	6023      	strmi	r3, [r4, #0]
 8003dc8:	b11d      	cbz	r5, 8003dd2 <_printf_i+0x19e>
 8003dca:	2310      	movs	r3, #16
 8003dcc:	e7ac      	b.n	8003d28 <_printf_i+0xf4>
 8003dce:	4827      	ldr	r0, [pc, #156]	@ (8003e6c <_printf_i+0x238>)
 8003dd0:	e7e9      	b.n	8003da6 <_printf_i+0x172>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f023 0320 	bic.w	r3, r3, #32
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	e7f6      	b.n	8003dca <_printf_i+0x196>
 8003ddc:	4616      	mov	r6, r2
 8003dde:	e7bd      	b.n	8003d5c <_printf_i+0x128>
 8003de0:	6833      	ldr	r3, [r6, #0]
 8003de2:	6825      	ldr	r5, [r4, #0]
 8003de4:	6961      	ldr	r1, [r4, #20]
 8003de6:	1d18      	adds	r0, r3, #4
 8003de8:	6030      	str	r0, [r6, #0]
 8003dea:	062e      	lsls	r6, r5, #24
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	d501      	bpl.n	8003df4 <_printf_i+0x1c0>
 8003df0:	6019      	str	r1, [r3, #0]
 8003df2:	e002      	b.n	8003dfa <_printf_i+0x1c6>
 8003df4:	0668      	lsls	r0, r5, #25
 8003df6:	d5fb      	bpl.n	8003df0 <_printf_i+0x1bc>
 8003df8:	8019      	strh	r1, [r3, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	4616      	mov	r6, r2
 8003e00:	e7bc      	b.n	8003d7c <_printf_i+0x148>
 8003e02:	6833      	ldr	r3, [r6, #0]
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	6032      	str	r2, [r6, #0]
 8003e08:	681e      	ldr	r6, [r3, #0]
 8003e0a:	6862      	ldr	r2, [r4, #4]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f7fc f9f6 	bl	8000200 <memchr>
 8003e14:	b108      	cbz	r0, 8003e1a <_printf_i+0x1e6>
 8003e16:	1b80      	subs	r0, r0, r6
 8003e18:	6060      	str	r0, [r4, #4]
 8003e1a:	6863      	ldr	r3, [r4, #4]
 8003e1c:	6123      	str	r3, [r4, #16]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e24:	e7aa      	b.n	8003d7c <_printf_i+0x148>
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	47d0      	blx	sl
 8003e30:	3001      	adds	r0, #1
 8003e32:	d0ad      	beq.n	8003d90 <_printf_i+0x15c>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	079b      	lsls	r3, r3, #30
 8003e38:	d413      	bmi.n	8003e62 <_printf_i+0x22e>
 8003e3a:	68e0      	ldr	r0, [r4, #12]
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	bfb8      	it	lt
 8003e42:	4618      	movlt	r0, r3
 8003e44:	e7a6      	b.n	8003d94 <_printf_i+0x160>
 8003e46:	2301      	movs	r3, #1
 8003e48:	4632      	mov	r2, r6
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	47d0      	blx	sl
 8003e50:	3001      	adds	r0, #1
 8003e52:	d09d      	beq.n	8003d90 <_printf_i+0x15c>
 8003e54:	3501      	adds	r5, #1
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	9903      	ldr	r1, [sp, #12]
 8003e5a:	1a5b      	subs	r3, r3, r1
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	dcf2      	bgt.n	8003e46 <_printf_i+0x212>
 8003e60:	e7eb      	b.n	8003e3a <_printf_i+0x206>
 8003e62:	2500      	movs	r5, #0
 8003e64:	f104 0619 	add.w	r6, r4, #25
 8003e68:	e7f5      	b.n	8003e56 <_printf_i+0x222>
 8003e6a:	bf00      	nop
 8003e6c:	08003fa5 	.word	0x08003fa5
 8003e70:	08003fb6 	.word	0x08003fb6

08003e74 <memmove>:
 8003e74:	4288      	cmp	r0, r1
 8003e76:	b510      	push	{r4, lr}
 8003e78:	eb01 0402 	add.w	r4, r1, r2
 8003e7c:	d902      	bls.n	8003e84 <memmove+0x10>
 8003e7e:	4284      	cmp	r4, r0
 8003e80:	4623      	mov	r3, r4
 8003e82:	d807      	bhi.n	8003e94 <memmove+0x20>
 8003e84:	1e43      	subs	r3, r0, #1
 8003e86:	42a1      	cmp	r1, r4
 8003e88:	d008      	beq.n	8003e9c <memmove+0x28>
 8003e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e92:	e7f8      	b.n	8003e86 <memmove+0x12>
 8003e94:	4402      	add	r2, r0
 8003e96:	4601      	mov	r1, r0
 8003e98:	428a      	cmp	r2, r1
 8003e9a:	d100      	bne.n	8003e9e <memmove+0x2a>
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ea6:	e7f7      	b.n	8003e98 <memmove+0x24>

08003ea8 <_sbrk_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d06      	ldr	r5, [pc, #24]	@ (8003ec4 <_sbrk_r+0x1c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fc ff74 	bl	8000da0 <_sbrk>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_sbrk_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_sbrk_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000b24 	.word	0x20000b24

08003ec8 <memcpy>:
 8003ec8:	440a      	add	r2, r1
 8003eca:	4291      	cmp	r1, r2
 8003ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed0:	d100      	bne.n	8003ed4 <memcpy+0xc>
 8003ed2:	4770      	bx	lr
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	d1f9      	bne.n	8003ed6 <memcpy+0xe>
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <_realloc_r>:
 8003ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee8:	4680      	mov	r8, r0
 8003eea:	4615      	mov	r5, r2
 8003eec:	460c      	mov	r4, r1
 8003eee:	b921      	cbnz	r1, 8003efa <_realloc_r+0x16>
 8003ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	f7ff bc4b 	b.w	8003790 <_malloc_r>
 8003efa:	b92a      	cbnz	r2, 8003f08 <_realloc_r+0x24>
 8003efc:	f7ff fbdc 	bl	80036b8 <_free_r>
 8003f00:	2400      	movs	r4, #0
 8003f02:	4620      	mov	r0, r4
 8003f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f08:	f000 f81a 	bl	8003f40 <_malloc_usable_size_r>
 8003f0c:	4285      	cmp	r5, r0
 8003f0e:	4606      	mov	r6, r0
 8003f10:	d802      	bhi.n	8003f18 <_realloc_r+0x34>
 8003f12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f16:	d8f4      	bhi.n	8003f02 <_realloc_r+0x1e>
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f7ff fc38 	bl	8003790 <_malloc_r>
 8003f20:	4607      	mov	r7, r0
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d0ec      	beq.n	8003f00 <_realloc_r+0x1c>
 8003f26:	42b5      	cmp	r5, r6
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	bf28      	it	cs
 8003f2e:	4632      	movcs	r2, r6
 8003f30:	f7ff ffca 	bl	8003ec8 <memcpy>
 8003f34:	4621      	mov	r1, r4
 8003f36:	4640      	mov	r0, r8
 8003f38:	f7ff fbbe 	bl	80036b8 <_free_r>
 8003f3c:	463c      	mov	r4, r7
 8003f3e:	e7e0      	b.n	8003f02 <_realloc_r+0x1e>

08003f40 <_malloc_usable_size_r>:
 8003f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f44:	1f18      	subs	r0, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bfbc      	itt	lt
 8003f4a:	580b      	ldrlt	r3, [r1, r0]
 8003f4c:	18c0      	addlt	r0, r0, r3
 8003f4e:	4770      	bx	lr

08003f50 <_init>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr

08003f5c <_fini>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr
