
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056cc  080056cc  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d4  080056d4  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d4  080056d4  000066d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056d8  080056d8  000066d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080056dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          000006a0  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000704  20000704  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d041  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002001  00000000  00000000  000140d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  000160d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000901  00000000  00000000  00016c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b89  00000000  00000000  00017569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001000e  00000000  00000000  0003c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0937  00000000  00000000  0004c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ca37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000348c  00000000  00000000  0012ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0012ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080048e0 	.word	0x080048e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080048e0 	.word	0x080048e0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000596:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800059a:	2201      	movs	r2, #1
 800059c:	2178      	movs	r1, #120	@ 0x78
 800059e:	484c      	ldr	r0, [pc, #304]	@ (80006d0 <SH1106_Init+0x140>)
 80005a0:	f002 f806 	bl	80025b0 <HAL_I2C_IsDeviceReady>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e08b      	b.n	80006c6 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005b4:	e002      	b.n	80005bc <SH1106_Init+0x2c>
		p--;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1f9      	bne.n	80005b6 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005c2:	22ae      	movs	r2, #174	@ 0xae
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	@ 0x78
 80005c8:	f000 fa4c 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 80005cc:	22b0      	movs	r2, #176	@ 0xb0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	@ 0x78
 80005d2:	f000 fa47 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 80005d6:	2281      	movs	r2, #129	@ 0x81
 80005d8:	2100      	movs	r1, #0
 80005da:	2078      	movs	r0, #120	@ 0x78
 80005dc:	f000 fa42 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 80005e0:	22ff      	movs	r2, #255	@ 0xff
 80005e2:	2100      	movs	r1, #0
 80005e4:	2078      	movs	r0, #120	@ 0x78
 80005e6:	f000 fa3d 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005ea:	22a1      	movs	r2, #161	@ 0xa1
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	@ 0x78
 80005f0:	f000 fa38 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 80005f4:	22a6      	movs	r2, #166	@ 0xa6
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	@ 0x78
 80005fa:	f000 fa33 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80005fe:	22a8      	movs	r2, #168	@ 0xa8
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa2e 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000608:	223f      	movs	r2, #63	@ 0x3f
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa29 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 8000612:	22ad      	movs	r2, #173	@ 0xad
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa24 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 800061c:	228b      	movs	r2, #139	@ 0x8b
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa1f 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000626:	2232      	movs	r2, #50	@ 0x32
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa1a 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000630:	22c8      	movs	r2, #200	@ 0xc8
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa15 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 800063a:	22d3      	movs	r2, #211	@ 0xd3
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa10 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa0b 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800064e:	22d5      	movs	r2, #213	@ 0xd5
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa06 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa01 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 8000662:	22d9      	movs	r2, #217	@ 0xd9
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 f9fc 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 800066c:	221f      	movs	r2, #31
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 f9f7 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000676:	22da      	movs	r2, #218	@ 0xda
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 f9f2 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 8000680:	2212      	movs	r2, #18
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 f9ed 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 800068a:	22db      	movs	r2, #219	@ 0xdb
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 f9e8 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 8000694:	2240      	movs	r2, #64	@ 0x40
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 f9e3 	bl	8000a64 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 800069e:	22af      	movs	r2, #175	@ 0xaf
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 f9de 	bl	8000a64 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 f843 	bl	8000734 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ae:	f000 f813 	bl	80006d8 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <SH1106_Init+0x144>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <SH1106_Init+0x144>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <SH1106_Init+0x144>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000518 	.word	0x20000518
 80006d4:	20000480 	.word	0x20000480

080006d8 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e01d      	b.n	8000720 <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3b50      	subs	r3, #80	@ 0x50
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	2078      	movs	r0, #120	@ 0x78
 80006f0:	f000 f9b8 	bl	8000a64 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2078      	movs	r0, #120	@ 0x78
 80006fa:	f000 f9b3 	bl	8000a64 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 80006fe:	2210      	movs	r2, #16
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	@ 0x78
 8000704:	f000 f9ae 	bl	8000a64 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	01db      	lsls	r3, r3, #7
 800070c:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <SH1106_UpdateScreen+0x58>)
 800070e:	441a      	add	r2, r3
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	2140      	movs	r1, #64	@ 0x40
 8000714:	2078      	movs	r0, #120	@ 0x78
 8000716:	f000 f93f 	bl	8000998 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	3301      	adds	r3, #1
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b07      	cmp	r3, #7
 8000724:	d9de      	bls.n	80006e4 <SH1106_UpdateScreen+0xc>
	}
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000080 	.word	0x20000080

08000734 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <SH1106_Fill+0x14>
 8000744:	2300      	movs	r3, #0
 8000746:	e000      	b.n	800074a <SH1106_Fill+0x16>
 8000748:	23ff      	movs	r3, #255	@ 0xff
 800074a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800074e:	4619      	mov	r1, r3
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <SH1106_Fill+0x2c>)
 8000752:	f003 fc45 	bl	8003fe0 <memset>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000080 	.word	0x20000080

08000764 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
 800076e:	460b      	mov	r3, r1
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	70fb      	strb	r3, [r7, #3]
	if (
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	2b7f      	cmp	r3, #127	@ 0x7f
 800077a:	d848      	bhi.n	800080e <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000780:	d845      	bhi.n	800080e <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <SH1106_DrawPixel+0xb8>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d006      	beq.n	8000798 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf0c      	ite	eq
 8000790:	2301      	moveq	r3, #1
 8000792:	2300      	movne	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d11a      	bne.n	80007d4 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 800079e:	88fa      	ldrh	r2, [r7, #6]
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	08db      	lsrs	r3, r3, #3
 80007a4:	b298      	uxth	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	01db      	lsls	r3, r3, #7
 80007aa:	4413      	add	r3, r2
 80007ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	f003 0307 	and.w	r3, r3, #7
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b259      	sxtb	r1, r3
 80007c4:	88fa      	ldrh	r2, [r7, #6]
 80007c6:	4603      	mov	r3, r0
 80007c8:	01db      	lsls	r3, r3, #7
 80007ca:	4413      	add	r3, r2
 80007cc:	b2c9      	uxtb	r1, r1
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007d0:	54d1      	strb	r1, [r2, r3]
 80007d2:	e01d      	b.n	8000810 <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b298      	uxth	r0, r3
 80007dc:	4603      	mov	r3, r0
 80007de:	01db      	lsls	r3, r3, #7
 80007e0:	4413      	add	r3, r2
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4013      	ands	r3, r2
 80007fc:	b259      	sxtb	r1, r3
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	4603      	mov	r3, r0
 8000802:	01db      	lsls	r3, r3, #7
 8000804:	4413      	add	r3, r2
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SH1106_DrawPixel+0xbc>)
 800080a:	54d1      	strb	r1, [r2, r3]
 800080c:	e000      	b.n	8000810 <SH1106_DrawPixel+0xac>
		return;
 800080e:	bf00      	nop
	}
}
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000480 	.word	0x20000480
 8000820:	20000080 	.word	0x20000080

08000824 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000834:	4a05      	ldr	r2, [pc, #20]	@ (800084c <SH1106_GotoXY+0x28>)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <SH1106_GotoXY+0x28>)
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	8053      	strh	r3, [r2, #2]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000480 	.word	0x20000480

08000850 <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 8000860:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <SH1106_Putc+0xf8>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
	if (
 800086c:	2b7f      	cmp	r3, #127	@ 0x7f
 800086e:	dc07      	bgt.n	8000880 <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 8000870:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <SH1106_Putc+0xf8>)
 8000872:	885b      	ldrh	r3, [r3, #2]
 8000874:	461a      	mov	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800087c:	2b3f      	cmp	r3, #63	@ 0x3f
 800087e:	dd01      	ble.n	8000884 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e05d      	b.n	8000940 <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e04b      	b.n	8000922 <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3b20      	subs	r3, #32
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	7849      	ldrb	r1, [r1, #1]
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4619      	mov	r1, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	440b      	add	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	e030      	b.n	8000910 <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d010      	beq.n	80008e0 <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <SH1106_Putc+0xf8>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b298      	uxth	r0, r3
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <SH1106_Putc+0xf8>)
 80008cc:	885a      	ldrh	r2, [r3, #2]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	4619      	mov	r1, r3
 80008da:	f7ff ff43 	bl	8000764 <SH1106_DrawPixel>
 80008de:	e014      	b.n	800090a <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <SH1106_Putc+0xf8>)
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b298      	uxth	r0, r3
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <SH1106_Putc+0xf8>)
 80008ee:	885a      	ldrh	r2, [r3, #2]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b299      	uxth	r1, r3
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	f7ff ff2d 	bl	8000764 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3301      	adds	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	4293      	cmp	r3, r2
 800091a:	d3c8      	bcc.n	80008ae <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	461a      	mov	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	4293      	cmp	r3, r2
 800092c:	d3ad      	bcc.n	800088a <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <SH1106_Putc+0xf8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	4413      	add	r3, r2
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <SH1106_Putc+0xf8>)
 800093c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800093e:	79fb      	ldrb	r3, [r7, #7]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000480 	.word	0x20000480

0800094c <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	4613      	mov	r3, r2
 8000958:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800095a:	e012      	b.n	8000982 <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff73 	bl	8000850 <SH1106_Putc>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d002      	beq.n	800097c <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	e008      	b.n	800098e <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1e8      	bne.n	800095c <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	781b      	ldrb	r3, [r3, #0]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b0c7      	sub	sp, #284	@ 0x11c
 800099c:	af02      	add	r7, sp, #8
 800099e:	4604      	mov	r4, r0
 80009a0:	4608      	mov	r0, r1
 80009a2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009a6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009aa:	600a      	str	r2, [r1, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009b2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009b6:	4622      	mov	r2, r4
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009be:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009c2:	4602      	mov	r2, r0
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009ce:	460a      	mov	r2, r1
 80009d0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80009da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009de:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80009ec:	e015      	b.n	8000a1a <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80009f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009f6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80009fa:	6812      	ldr	r2, [r2, #0]
 80009fc:	441a      	add	r2, r3
 80009fe:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a02:	3301      	adds	r3, #1
 8000a04:	7811      	ldrb	r1, [r2, #0]
 8000a06:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a0a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a0e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a10:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a1a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a24:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a28:	8812      	ldrh	r2, [r2, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d8df      	bhi.n	80009ee <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a32:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	f107 020c 	add.w	r2, r7, #12
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	9000      	str	r0, [sp, #0]
 8000a50:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <SH1106_I2C_WriteMulti+0xc8>)
 8000a52:	f001 fcaf 	bl	80023b4 <HAL_I2C_Master_Transmit>
}
 8000a56:	bf00      	nop
 8000a58:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	20000518 	.word	0x20000518

08000a64 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	71bb      	strb	r3, [r7, #6]
 8000a72:	4613      	mov	r3, r2
 8000a74:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a7a:	797b      	ldrb	r3, [r7, #5]
 8000a7c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	b299      	uxth	r1, r3
 8000a82:	f107 020c 	add.w	r2, r7, #12
 8000a86:	230a      	movs	r3, #10
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SH1106_I2C_Write+0x38>)
 8000a8e:	f001 fc91 	bl	80023b4 <HAL_I2C_Master_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000518 	.word	0x20000518

08000aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0a0      	sub	sp, #128	@ 0x80
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa6:	f000 fc3d 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aaa:	f000 f88b 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f000 fa0b 	bl	8000ec8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ab2:	f000 f8f7 	bl	8000ca4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ab6:	f000 f949 	bl	8000d4c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000aba:	f000 f9db 	bl	8000e74 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000abe:	f000 f999 	bl	8000df4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000ac2:	4837      	ldr	r0, [pc, #220]	@ (8000ba0 <main+0x100>)
 8000ac4:	f000 fd08 	bl	80014d8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000ac8:	4836      	ldr	r0, [pc, #216]	@ (8000ba4 <main+0x104>)
 8000aca:	f000 fd05 	bl	80014d8 <HAL_ADC_Start>

  char buf[100];
  SH1106_Init();
 8000ace:	f7ff fd5f 	bl	8000590 <SH1106_Init>
  sprintf(buf, "%s", "Joystick");
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4a34      	ldr	r2, [pc, #208]	@ (8000ba8 <main+0x108>)
 8000ad8:	4934      	ldr	r1, [pc, #208]	@ (8000bac <main+0x10c>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fa60 	bl	8003fa0 <siprintf>
  SH1106_GotoXY(12, 10);
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f7ff fe9e 	bl	8000824 <SH1106_GotoXY>
  SH1106_Puts(buf, &Font_11x18, 1);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2201      	movs	r2, #1
 8000aee:	4930      	ldr	r1, [pc, #192]	@ (8000bb0 <main+0x110>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff2b 	bl	800094c <SH1106_Puts>
  SH1106_UpdateScreen();
 8000af6:	f7ff fdef 	bl	80006d8 <SH1106_UpdateScreen>

  HAL_Delay(1000);
 8000afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afe:	f000 fc83 	bl	8001408 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_PollForConversion(&hadc1, 10);
 8000b02:	210a      	movs	r1, #10
 8000b04:	4826      	ldr	r0, [pc, #152]	@ (8000ba0 <main+0x100>)
 8000b06:	f000 fdb9 	bl	800167c <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc2, 10);
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	4825      	ldr	r0, [pc, #148]	@ (8000ba4 <main+0x104>)
 8000b0e:	f000 fdb5 	bl	800167c <HAL_ADC_PollForConversion>

    int JoystickX = HAL_ADC_GetValue(&hadc1);
 8000b12:	4823      	ldr	r0, [pc, #140]	@ (8000ba0 <main+0x100>)
 8000b14:	f000 fe3d 	bl	8001792 <HAL_ADC_GetValue>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int JoystickY = HAL_ADC_GetValue(&hadc2);
 8000b1c:	4821      	ldr	r0, [pc, #132]	@ (8000ba4 <main+0x104>)
 8000b1e:	f000 fe38 	bl	8001792 <HAL_ADC_GetValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	67bb      	str	r3, [r7, #120]	@ 0x78

    char s[20];
    sprintf(s, "%3d-%3d\n", JoystickX, JoystickY);
 8000b26:	4638      	mov	r0, r7
 8000b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b2c:	4921      	ldr	r1, [pc, #132]	@ (8000bb4 <main+0x114>)
 8000b2e:	f003 fa37 	bl	8003fa0 <siprintf>
    HAL_UART_Transmit(&huart1, s, strlen(s), 10);
 8000b32:	463b      	mov	r3, r7
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fb5b 	bl	80001f0 <strlen>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4639      	mov	r1, r7
 8000b40:	230a      	movs	r3, #10
 8000b42:	481d      	ldr	r0, [pc, #116]	@ (8000bb8 <main+0x118>)
 8000b44:	f002 fe70 	bl	8003828 <HAL_UART_Transmit>

    sprintf(buf, "X: %d", JoystickX);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b4e:	491b      	ldr	r1, [pc, #108]	@ (8000bbc <main+0x11c>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fa25 	bl	8003fa0 <siprintf>
    SH1106_GotoXY(12, 30);
 8000b56:	211e      	movs	r1, #30
 8000b58:	200c      	movs	r0, #12
 8000b5a:	f7ff fe63 	bl	8000824 <SH1106_GotoXY>
    SH1106_Puts(buf, &Font_11x18, 1);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2201      	movs	r2, #1
 8000b64:	4912      	ldr	r1, [pc, #72]	@ (8000bb0 <main+0x110>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fef0 	bl	800094c <SH1106_Puts>
    sprintf(buf, "Y: %d", JoystickY);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000b72:	4913      	ldr	r1, [pc, #76]	@ (8000bc0 <main+0x120>)
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 fa13 	bl	8003fa0 <siprintf>
    SH1106_GotoXY(12, 50);
 8000b7a:	2132      	movs	r1, #50	@ 0x32
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f7ff fe51 	bl	8000824 <SH1106_GotoXY>
    SH1106_Puts(buf, &Font_11x18, 1);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2201      	movs	r2, #1
 8000b88:	4909      	ldr	r1, [pc, #36]	@ (8000bb0 <main+0x110>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fede 	bl	800094c <SH1106_Puts>
    SH1106_UpdateScreen();
 8000b90:	f7ff fda2 	bl	80006d8 <SH1106_UpdateScreen>

    HAL_Delay(50);
 8000b94:	2032      	movs	r0, #50	@ 0x32
 8000b96:	f000 fc37 	bl	8001408 <HAL_Delay>
  {
 8000b9a:	bf00      	nop
 8000b9c:	e7b1      	b.n	8000b02 <main+0x62>
 8000b9e:	bf00      	nop
 8000ba0:	20000488 	.word	0x20000488
 8000ba4:	200004d0 	.word	0x200004d0
 8000ba8:	080048f8 	.word	0x080048f8
 8000bac:	08004904 	.word	0x08004904
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08004908 	.word	0x08004908
 8000bb8:	2000056c 	.word	0x2000056c
 8000bbc:	08004914 	.word	0x08004914
 8000bc0:	0800491c 	.word	0x0800491c

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	@ 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fa04 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <SystemClock_Config+0xd8>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <SystemClock_Config+0xdc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a24      	ldr	r2, [pc, #144]	@ (8000ca0 <SystemClock_Config+0xdc>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <SystemClock_Config+0xdc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c38:	23b4      	movs	r3, #180	@ 0xb4
 8000c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c40:	2304      	movs	r3, #4
 8000c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 f905 	bl	8002e58 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c54:	f000 f96e 	bl	8000f34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c58:	f002 f8ae 	bl	8002db8 <HAL_PWREx_EnableOverDrive>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c62:	f000 f967 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2105      	movs	r1, #5
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fb5f 	bl	8003348 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c90:	f000 f950 	bl	8000f34 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3750      	adds	r7, #80	@ 0x50
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40007000 	.word	0x40007000

08000ca4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cb8:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <MX_ADC1_Init+0xa0>)
 8000cba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000ce8:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <MX_ADC1_Init+0xa4>)
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000d08:	f000 fba2 	bl	8001450 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d12:	f000 f90f 	bl	8000f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d16:	230d      	movs	r3, #13
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <MX_ADC1_Init+0x9c>)
 8000d28:	f000 fd40 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d32:	f000 f8ff 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000488 	.word	0x20000488
 8000d44:	40012000 	.word	0x40012000
 8000d48:	0f000001 	.word	0x0f000001

08000d4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d60:	4a22      	ldr	r2, [pc, #136]	@ (8000dec <MX_ADC2_Init+0xa0>)
 8000d62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d64:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d90:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <MX_ADC2_Init+0xa4>)
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000db0:	f000 fb4e 	bl	8001450 <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000dba:	f000 f8bb 	bl	8000f34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <MX_ADC2_Init+0x9c>)
 8000dd0:	f000 fcec 	bl	80017ac <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000dda:	f000 f8ab 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200004d0 	.word	0x200004d0
 8000dec:	40012100 	.word	0x40012100
 8000df0:	0f000001 	.word	0x0f000001

08000df4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <MX_I2C3_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <MX_I2C3_Init+0x7c>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e32:	f001 f97b 	bl	800212c <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f000 f87a 	bl	8000f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e44:	f001 ff3d 	bl	8002cc2 <HAL_I2CEx_ConfigAnalogFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e4e:	f000 f871 	bl	8000f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_I2C3_Init+0x74>)
 8000e56:	f001 ff70 	bl	8002d3a <HAL_I2CEx_ConfigDigitalFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f868 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000518 	.word	0x20000518
 8000e6c:	40005c00 	.word	0x40005c00
 8000e70:	00061a80 	.word	0x00061a80

08000e74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_USART1_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000eac:	f002 fc6c 	bl	8003788 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f83d 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000056c 	.word	0x2000056c
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a16      	ldr	r2, [pc, #88]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <MX_GPIO_Init+0x68>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	@ 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a2e      	ldr	r2, [pc, #184]	@ (8001068 <HAL_ADC_MspInit+0xd8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d128      	bne.n	8001004 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a2c      	ldr	r2, [pc, #176]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a25      	ldr	r2, [pc, #148]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fea:	2308      	movs	r3, #8
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481c      	ldr	r0, [pc, #112]	@ (8001070 <HAL_ADC_MspInit+0xe0>)
 8000ffe:	f000 fee9 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001002:	e02c      	b.n	800105e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <HAL_ADC_MspInit+0xe4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d127      	bne.n	800105e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8001018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_ADC_MspInit+0xdc>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001046:	2320      	movs	r3, #32
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4807      	ldr	r0, [pc, #28]	@ (8001078 <HAL_ADC_MspInit+0xe8>)
 800105a:	f000 febb 	bl	8001dd4 <HAL_GPIO_Init>
}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	@ 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012000 	.word	0x40012000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40012100 	.word	0x40012100
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a29      	ldr	r2, [pc, #164]	@ (8001140 <HAL_I2C_MspInit+0xc4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d14b      	bne.n	8001136 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010e8:	2304      	movs	r3, #4
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4815      	ldr	r0, [pc, #84]	@ (8001148 <HAL_I2C_MspInit+0xcc>)
 80010f4:	f000 fe6e 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800110a:	2304      	movs	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	480d      	ldr	r0, [pc, #52]	@ (800114c <HAL_I2C_MspInit+0xd0>)
 8001116:	f000 fe5d 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 8001124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_I2C_MspInit+0xc8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	@ 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005c00 	.word	0x40005c00
 8001144:	40023800 	.word	0x40023800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020000 	.word	0x40020000

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_UART_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12c      	bne.n	80011cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_UART_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <HAL_UART_MspInit+0x8c>)
 80011c8:	f000 fe04 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f8c7 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	@ (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f002 febe 	bl	8003ff0 <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	220c      	movs	r2, #12
 8001278:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	@ (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20030000 	.word	0x20030000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200005b4 	.word	0x200005b4
 80012a8:	20000708 	.word	0x20000708

080012ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001308 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d4:	f7ff ffea 	bl	80012ac <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	@ (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	@ (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f002 fe7d 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff fbcd 	bl	8000aa0 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001308:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001314:	080056dc 	.word	0x080056dc
  ldr r2, =_sbss
 8001318:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800131c:	20000704 	.word	0x20000704

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 fd0d 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fdf2 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fd17 	bl	8001dba <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 fced 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000010 	.word	0x20000010
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010
 80013ec:	200005b8 	.word	0x200005b8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200005b8 	.word	0x200005b8

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000010 	.word	0x20000010

08001450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e033      	b.n	80014ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fd8e 	bl	8000f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fab4 	bl	8001a10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014be:	e001      	b.n	80014c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Start+0x1a>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e0b2      	b.n	8001658 <HAL_ADC_Start+0x180>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d018      	beq.n	800153a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001518:	4b52      	ldr	r3, [pc, #328]	@ (8001664 <HAL_ADC_Start+0x18c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a52      	ldr	r2, [pc, #328]	@ (8001668 <HAL_ADC_Start+0x190>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9a      	lsrs	r2, r3, #18
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d17a      	bne.n	800163e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001572:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001586:	d106      	bne.n	8001596 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	f023 0206 	bic.w	r2, r3, #6
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	645a      	str	r2, [r3, #68]	@ 0x44
 8001594:	e002      	b.n	800159c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <HAL_ADC_Start+0x194>)
 80015a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d12a      	bne.n	8001614 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001670 <HAL_ADC_Start+0x198>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d015      	beq.n	80015f4 <HAL_ADC_Start+0x11c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_ADC_Start+0x19c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d105      	bne.n	80015de <HAL_ADC_Start+0x106>
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_ADC_Start+0x194>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a25      	ldr	r2, [pc, #148]	@ (8001678 <HAL_ADC_Start+0x1a0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d136      	bne.n	8001656 <HAL_ADC_Start+0x17e>
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_ADC_Start+0x194>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d130      	bne.n	8001656 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d129      	bne.n	8001656 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	e020      	b.n	8001656 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <HAL_ADC_Start+0x198>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11b      	bne.n	8001656 <HAL_ADC_Start+0x17e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d114      	bne.n	8001656 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e00b      	b.n	8001656 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20000008 	.word	0x20000008
 8001668:	431bde83 	.word	0x431bde83
 800166c:	40012300 	.word	0x40012300
 8001670:	40012000 	.word	0x40012000
 8001674:	40012100 	.word	0x40012100
 8001678:	40012200 	.word	0x40012200

0800167c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001698:	d113      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016a8:	d10b      	bne.n	80016c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f043 0220 	orr.w	r2, r3, #32
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e063      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c2:	f7ff fe95 	bl	80013f0 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016c8:	e021      	b.n	800170e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d01d      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_ADC_PollForConversion+0x6c>
 80016d8:	f7ff fe8a 	bl	80013f0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d212      	bcs.n	800170e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d00b      	beq.n	800170e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f043 0204 	orr.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e03d      	b.n	800178a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b02      	cmp	r3, #2
 800171a:	d1d6      	bne.n	80016ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0212 	mvn.w	r2, #18
 8001724:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d123      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11f      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e113      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x244>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b09      	cmp	r3, #9
 80017d6:	d925      	bls.n	8001824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	3b1e      	subs	r3, #30
 80017ee:	2207      	movs	r2, #7
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68d9      	ldr	r1, [r3, #12]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4403      	add	r3, r0
 8001816:	3b1e      	subs	r3, #30
 8001818:	409a      	lsls	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e022      	b.n	800186a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	2207      	movs	r2, #7
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6919      	ldr	r1, [r3, #16]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	4603      	mov	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4403      	add	r3, r0
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d824      	bhi.n	80018bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	3b05      	subs	r3, #5
 8001884:	221f      	movs	r2, #31
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ba:	e04c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d824      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b23      	subs	r3, #35	@ 0x23
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b23      	subs	r3, #35	@ 0x23
 8001900:	fa00 f203 	lsl.w	r2, r0, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30
 800190c:	e023      	b.n	8001956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b41      	subs	r3, #65	@ 0x41
 8001920:	221f      	movs	r2, #31
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	3b41      	subs	r3, #65	@ 0x41
 800194a:	fa00 f203 	lsl.w	r2, r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_ADC_ConfigChannel+0x250>)
 8001958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a28      	ldr	r2, [pc, #160]	@ (8001a00 <HAL_ADC_ConfigChannel+0x254>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d10f      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d10b      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_ADC_ConfigChannel+0x254>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <HAL_ADC_ConfigChannel+0x258>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0x1f4>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b11      	cmp	r3, #17
 800199e:	d122      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a11      	ldr	r2, [pc, #68]	@ (8001a04 <HAL_ADC_ConfigChannel+0x258>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d111      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_ADC_ConfigChannel+0x25c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <HAL_ADC_ConfigChannel+0x260>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	0c9a      	lsrs	r2, r3, #18
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40012300 	.word	0x40012300
 8001a00:	40012000 	.word	0x40012000
 8001a04:	10000012 	.word	0x10000012
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	4b79      	ldr	r3, [pc, #484]	@ (8001c00 <ADC_Init+0x1f0>)
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	021a      	lsls	r2, r3, #8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	4a58      	ldr	r2, [pc, #352]	@ (8001c04 <ADC_Init+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d022      	beq.n	8001aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e00f      	b.n	8001b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0202 	bic.w	r2, r2, #2
 8001b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e1b      	ldrb	r3, [r3, #24]
 8001b28:	005a      	lsls	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	3b01      	subs	r3, #1
 8001b68:	035a      	lsls	r2, r3, #13
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	e007      	b.n	8001b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	051a      	lsls	r2, r3, #20
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bc6:	025a      	lsls	r2, r3, #9
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	029a      	lsls	r2, r3, #10
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	0f000001 	.word	0x0f000001

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f7ff ff8e 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff47 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff5c 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff8e 	bl	8001cc0 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5d 	bl	8001c6c <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffb0 	bl	8001d28 <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e177      	b.n	80020e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8166 	bne.w	80020da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80c0 	beq.w	80020da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b66      	ldr	r3, [pc, #408]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	4a65      	ldr	r2, [pc, #404]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6a:	4b63      	ldr	r3, [pc, #396]	@ (80020f8 <HAL_GPIO_Init+0x324>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <HAL_GPIO_Init+0x328>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	@ (8002100 <HAL_GPIO_Init+0x32c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d037      	beq.n	8002012 <HAL_GPIO_Init+0x23e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a57      	ldr	r2, [pc, #348]	@ (8002104 <HAL_GPIO_Init+0x330>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d031      	beq.n	800200e <HAL_GPIO_Init+0x23a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a56      	ldr	r2, [pc, #344]	@ (8002108 <HAL_GPIO_Init+0x334>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02b      	beq.n	800200a <HAL_GPIO_Init+0x236>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a55      	ldr	r2, [pc, #340]	@ (800210c <HAL_GPIO_Init+0x338>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d025      	beq.n	8002006 <HAL_GPIO_Init+0x232>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	@ (8002110 <HAL_GPIO_Init+0x33c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01f      	beq.n	8002002 <HAL_GPIO_Init+0x22e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a53      	ldr	r2, [pc, #332]	@ (8002114 <HAL_GPIO_Init+0x340>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x22a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	@ (8002118 <HAL_GPIO_Init+0x344>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	@ (800211c <HAL_GPIO_Init+0x348>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	@ (8002120 <HAL_GPIO_Init+0x34c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <HAL_GPIO_Init+0x350>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fea:	2309      	movs	r3, #9
 8001fec:	e012      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001fee:	230a      	movs	r3, #10
 8001ff0:	e010      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00e      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002024:	4935      	ldr	r1, [pc, #212]	@ (80020fc <HAL_GPIO_Init+0x328>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b3d      	ldr	r3, [pc, #244]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a34      	ldr	r2, [pc, #208]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b32      	ldr	r3, [pc, #200]	@ (8002128 <HAL_GPIO_Init+0x354>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_GPIO_Init+0x354>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <HAL_GPIO_Init+0x354>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f ae84 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40021c00 	.word	0x40021c00
 8002120:	40022000 	.word	0x40022000
 8002124:	40022400 	.word	0x40022400
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e12b      	b.n	8002396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe ff92 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002190:	f001 fad2 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a81      	ldr	r2, [pc, #516]	@ (80023a0 <HAL_I2C_Init+0x274>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d807      	bhi.n	80021b0 <HAL_I2C_Init+0x84>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a80      	ldr	r2, [pc, #512]	@ (80023a4 <HAL_I2C_Init+0x278>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	bf94      	ite	ls
 80021a8:	2301      	movls	r3, #1
 80021aa:	2300      	movhi	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e006      	b.n	80021be <HAL_I2C_Init+0x92>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a7d      	ldr	r2, [pc, #500]	@ (80023a8 <HAL_I2C_Init+0x27c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0e7      	b.n	8002396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a78      	ldr	r2, [pc, #480]	@ (80023ac <HAL_I2C_Init+0x280>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	@ (80023a0 <HAL_I2C_Init+0x274>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d802      	bhi.n	8002200 <HAL_I2C_Init+0xd4>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	e009      	b.n	8002214 <HAL_I2C_Init+0xe8>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	4a69      	ldr	r2, [pc, #420]	@ (80023b0 <HAL_I2C_Init+0x284>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	3301      	adds	r3, #1
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002226:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	495c      	ldr	r1, [pc, #368]	@ (80023a0 <HAL_I2C_Init+0x274>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d819      	bhi.n	8002268 <HAL_I2C_Init+0x13c>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002248:	400b      	ands	r3, r1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_I2C_Init+0x138>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e59      	subs	r1, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fbb1 f3f3 	udiv	r3, r1, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	e051      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002264:	2304      	movs	r3, #4
 8002266:	e04f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <HAL_I2C_Init+0x168>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e012      	b.n	80022ba <HAL_I2C_Init+0x18e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Init+0x196>
 80022be:	2301      	movs	r3, #1
 80022c0:	e022      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <HAL_I2C_Init+0x1bc>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e58      	subs	r0, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	440b      	add	r3, r1
 80022d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	6809      	ldr	r1, [r1, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002336:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6911      	ldr	r1, [r2, #16]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68d2      	ldr	r2, [r2, #12]
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	000186a0 	.word	0x000186a0
 80023a4:	001e847f 	.word	0x001e847f
 80023a8:	003d08ff 	.word	0x003d08ff
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	461a      	mov	r2, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	817b      	strh	r3, [r7, #10]
 80023c4:	4613      	mov	r3, r2
 80023c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff f812 	bl	80013f0 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	f040 80e0 	bne.w	800259c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	4970      	ldr	r1, [pc, #448]	@ (80025a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fa92 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	e0d3      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_I2C_Master_Transmit+0x50>
 8002400:	2302      	movs	r3, #2
 8002402:	e0cc      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d007      	beq.n	800242a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	@ 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2210      	movs	r2, #16
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a50      	ldr	r2, [pc, #320]	@ (80025ac <HAL_I2C_Master_Transmit+0x1f8>)
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800246c:	8979      	ldrh	r1, [r7, #10]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f9ca 	bl	800280c <I2C_MasterRequestWrite>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e08d      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002498:	e066      	b.n	8002568 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fb50 	bl	8002b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e06b      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <HAL_I2C_Master_Transmit+0x188>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	6a39      	ldr	r1, [r7, #32]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fb47 	bl	8002bd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002562:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e01a      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d194      	bne.n	800249a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	@ 0x28
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7fe ff16 	bl	80013f0 <HAL_GetTick>
 80025c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 8111 	bne.w	80027fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4988      	ldr	r1, [pc, #544]	@ (8002804 <HAL_I2C_IsDeviceReady+0x254>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f994 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e104      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_I2C_IsDeviceReady+0x50>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0fd      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d007      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002634:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2224      	movs	r2, #36	@ 0x24
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a70      	ldr	r2, [pc, #448]	@ (8002808 <HAL_I2C_IsDeviceReady+0x258>)
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002658:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f952 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002680:	d103      	bne.n	800268a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0b6      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800268e:	897b      	ldrh	r3, [r7, #10]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800269c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800269e:	f7fe fea7 	bl	80013f0 <HAL_GetTick>
 80026a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	bf0c      	ite	eq
 80026b2:	2301      	moveq	r3, #1
 80026b4:	2300      	movne	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026d2:	e025      	b.n	8002720 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026d4:	f7fe fe8c 	bl	80013f0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <HAL_I2C_IsDeviceReady+0x13a>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	22a0      	movs	r2, #160	@ 0xa0
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2ba0      	cmp	r3, #160	@ 0xa0
 800272a:	d005      	beq.n	8002738 <HAL_I2C_IsDeviceReady+0x188>
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_I2C_IsDeviceReady+0x188>
 8002732:	7dbb      	ldrb	r3, [r7, #22]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0cd      	beq.n	80026d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d129      	bne.n	80027a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2319      	movs	r3, #25
 800277a:	2201      	movs	r2, #1
 800277c:	4921      	ldr	r1, [pc, #132]	@ (8002804 <HAL_I2C_IsDeviceReady+0x254>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8c6 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e036      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e02c      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2319      	movs	r3, #25
 80027c2:	2201      	movs	r2, #1
 80027c4:	490f      	ldr	r1, [pc, #60]	@ (8002804 <HAL_I2C_IsDeviceReady+0x254>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8a2 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e012      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3301      	adds	r3, #1
 80027da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f4ff af32 	bcc.w	800264a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	00100002 	.word	0x00100002
 8002808:	ffff0000 	.word	0xffff0000

0800280c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d006      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002834:	d108      	bne.n	8002848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e00b      	b.n	8002860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	2b12      	cmp	r3, #18
 800284e:	d107      	bne.n	8002860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800285e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f84f 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002886:	d103      	bne.n	8002890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e035      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e01b      	b.n	80028e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	11db      	asrs	r3, r3, #7
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0306 	and.w	r3, r3, #6
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f063 030f 	orn	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	490e      	ldr	r1, [pc, #56]	@ (8002908 <I2C_MasterRequestWrite+0xfc>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f898 	bl	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e010      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <I2C_MasterRequestWrite+0x100>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f888 	bl	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010008 	.word	0x00010008
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	e048      	b.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d044      	beq.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fd61 	bl	80013f0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d139      	bne.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10d      	bne.n	8002966 <I2C_WaitOnFlagUntilTimeout+0x56>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	e00c      	b.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	429a      	cmp	r2, r3
 8002984:	d116      	bne.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e023      	b.n	80029fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	0c1b      	lsrs	r3, r3, #16
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10d      	bne.n	80029da <I2C_WaitOnFlagUntilTimeout+0xca>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	e00c      	b.n	80029f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	43da      	mvns	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d093      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a12:	e071      	b.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a22:	d123      	bne.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f043 0204 	orr.w	r2, r3, #4
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e067      	b.n	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d041      	beq.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a74:	f7fe fcbc 	bl	80013f0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d136      	bne.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10c      	bne.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	e00b      	b.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e021      	b.n	8002b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10c      	bne.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	43da      	mvns	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf14      	ite	ne
 8002b14:	2301      	movne	r3, #1
 8002b16:	2300      	moveq	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e00b      	b.n	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f af6d 	bne.w	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b50:	e034      	b.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f886 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e034      	b.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d028      	beq.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7fe fc41 	bl	80013f0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11d      	bne.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b80      	cmp	r3, #128	@ 0x80
 8002b8c:	d016      	beq.n	8002bbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b80      	cmp	r3, #128	@ 0x80
 8002bc8:	d1c3      	bne.n	8002b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be0:	e034      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f83e 	bl	8002c64 <I2C_IsAcknowledgeFailed>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e034      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d028      	beq.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fe fbf9 	bl	80013f0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11d      	bne.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d016      	beq.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d1c3      	bne.n	8002be2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d11b      	bne.n	8002cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d129      	bne.n	8002d2c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	@ 0x24
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d12a      	bne.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	@ 0x24
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	f023 030f 	bic.w	r3, r3, #15
 8002d7a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	89fa      	ldrh	r2, [r7, #14]
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	4a1f      	ldr	r2, [pc, #124]	@ (8002e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002dde:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_PWREx_EnableOverDrive+0x94>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de4:	f7fe fb04 	bl	80013f0 <HAL_GetTick>
 8002de8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dea:	e009      	b.n	8002e00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dec:	f7fe fb00 	bl	80013f0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dfa:	d901      	bls.n	8002e00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e01f      	b.n	8002e40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d1ee      	bne.n	8002dec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e14:	f7fe faec 	bl	80013f0 <HAL_GetTick>
 8002e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e1a:	e009      	b.n	8002e30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e1c:	f7fe fae8 	bl	80013f0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e2a:	d901      	bls.n	8002e30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e007      	b.n	8002e40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e3c:	d1ee      	bne.n	8002e1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	420e0040 	.word	0x420e0040
 8002e50:	40007000 	.word	0x40007000
 8002e54:	420e0044 	.word	0x420e0044

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e267      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d075      	beq.n	8002f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e76:	4b88      	ldr	r3, [pc, #544]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d00c      	beq.n	8002e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e82:	4b85      	ldr	r3, [pc, #532]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8e:	4b82      	ldr	r3, [pc, #520]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x108>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d157      	bne.n	8002f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e242      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x74>
 8002ebe:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x98>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xb0>
 8002ef0:	4b69      	ldr	r3, [pc, #420]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a68      	ldr	r2, [pc, #416]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fa6e 	bl	80013f0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fa6a 	bl	80013f0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	@ 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e207      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xc0>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fa5a 	bl	80013f0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fa56 	bl	80013f0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1f3      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b51      	ldr	r3, [pc, #324]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0xe8>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b47      	ldr	r3, [pc, #284]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f86:	4b44      	ldr	r3, [pc, #272]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b41      	ldr	r3, [pc, #260]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1c7      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4937      	ldr	r1, [pc, #220]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	@ (800309c <HAL_RCC_OscConfig+0x244>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe fa0f 	bl	80013f0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe fa0b 	bl	80013f0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1a8      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4925      	ldr	r1, [pc, #148]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCC_OscConfig+0x244>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f9ee 	bl	80013f0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe f9ea 	bl	80013f0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e187      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d036      	beq.n	80030b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <HAL_RCC_OscConfig+0x248>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe f9ce 	bl	80013f0 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe f9ca 	bl	80013f0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e167      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_OscConfig+0x240>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x200>
 8003076:	e01b      	b.n	80030b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <HAL_RCC_OscConfig+0x248>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fe f9b7 	bl	80013f0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003084:	e00e      	b.n	80030a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7fe f9b3 	bl	80013f0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d907      	bls.n	80030a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e150      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ea      	bne.n	8003086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b81      	ldr	r3, [pc, #516]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	4b7d      	ldr	r3, [pc, #500]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	4a7c      	ldr	r2, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030de:	4b7a      	ldr	r3, [pc, #488]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b77      	ldr	r3, [pc, #476]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b74      	ldr	r3, [pc, #464]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fe f973 	bl	80013f0 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe f96f 	bl	80013f0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e10c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_OscConfig+0x474>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ea>
 8003134:	4b64      	ldr	r3, [pc, #400]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a63      	ldr	r2, [pc, #396]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x30c>
 800314a:	4b5f      	ldr	r3, [pc, #380]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	4a5e      	ldr	r2, [pc, #376]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	@ 0x70
 8003156:	4b5c      	ldr	r3, [pc, #368]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	4a5b      	ldr	r2, [pc, #364]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	@ 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x324>
 8003164:	4b58      	ldr	r3, [pc, #352]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003168:	4a57      	ldr	r2, [pc, #348]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003170:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003174:	4a54      	ldr	r2, [pc, #336]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f934 	bl	80013f0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe f930 	bl	80013f0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e0cb      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x334>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fe f91e 	bl	80013f0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe f91a 	bl	80013f0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b5      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b3e      	ldr	r3, [pc, #248]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b39      	ldr	r3, [pc, #228]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	4a38      	ldr	r2, [pc, #224]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a1 	beq.w	8003338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f6:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d05c      	beq.n	80032bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d141      	bne.n	800328e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f8ee 	bl	80013f0 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe f8ea 	bl	80013f0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e087      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	019b      	lsls	r3, r3, #6
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	3b01      	subs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	491b      	ldr	r1, [pc, #108]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b1b      	ldr	r3, [pc, #108]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe f8c3 	bl	80013f0 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe f8bf 	bl	80013f0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e05c      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	4b11      	ldr	r3, [pc, #68]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x416>
 800328c:	e054      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe f8ac 	bl	80013f0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe f8a8 	bl	80013f0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e045      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x444>
 80032ba:	e03d      	b.n	8003338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e038      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x4ec>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d028      	beq.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d121      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11a      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800330a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330c:	4293      	cmp	r3, r2
 800330e:	d111      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0cc      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b68      	ldr	r3, [pc, #416]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d90c      	bls.n	8003384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b65      	ldr	r3, [pc, #404]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b63      	ldr	r3, [pc, #396]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b8      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800339c:	4b59      	ldr	r3, [pc, #356]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b4:	4b53      	ldr	r3, [pc, #332]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a52      	ldr	r2, [pc, #328]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b50      	ldr	r3, [pc, #320]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	494d      	ldr	r1, [pc, #308]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d044      	beq.n	8003468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003416:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e067      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003426:	4b37      	ldr	r3, [pc, #220]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4934      	ldr	r1, [pc, #208]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003438:	f7fd ffda 	bl	80013f0 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	e00a      	b.n	8003456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003440:	f7fd ffd6 	bl	80013f0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e04f      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 020c 	and.w	r2, r3, #12
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d1eb      	bne.n	8003440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d20c      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003476:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e032      	b.n	80034f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b19      	ldr	r3, [pc, #100]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4916      	ldr	r1, [pc, #88]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	490e      	ldr	r1, [pc, #56]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ce:	f000 f821 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490a      	ldr	r1, [pc, #40]	@ (8003508 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a09      	ldr	r2, [pc, #36]	@ (800350c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_RCC_ClockConfig+0x1c8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd ff3a 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00
 8003504:	40023800 	.word	0x40023800
 8003508:	08005680 	.word	0x08005680
 800350c:	20000008 	.word	0x20000008
 8003510:	2000000c 	.word	0x2000000c

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b094      	sub	sp, #80	@ 0x50
 800351a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352c:	4b79      	ldr	r3, [pc, #484]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d00d      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x40>
 8003538:	2b08      	cmp	r3, #8
 800353a:	f200 80e1 	bhi.w	8003700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x34>
 8003542:	2b04      	cmp	r3, #4
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x3a>
 8003546:	e0db      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b73      	ldr	r3, [pc, #460]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x204>)
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354c:	e0db      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354e:	4b73      	ldr	r3, [pc, #460]	@ (800371c <HAL_RCC_GetSysClockFreq+0x208>)
 8003550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003552:	e0d8      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003554:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800355c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355e:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d063      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356a:	4b6a      	ldr	r3, [pc, #424]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	2200      	movs	r2, #0
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
 800357e:	2300      	movs	r3, #0
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
 8003582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003586:	4622      	mov	r2, r4
 8003588:	462b      	mov	r3, r5
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4621      	mov	r1, r4
 80035a0:	1a51      	subs	r1, r2, r1
 80035a2:	6139      	str	r1, [r7, #16]
 80035a4:	4629      	mov	r1, r5
 80035a6:	eb63 0301 	sbc.w	r3, r3, r1
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b8:	4659      	mov	r1, fp
 80035ba:	018b      	lsls	r3, r1, #6
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c2:	4651      	mov	r1, sl
 80035c4:	018a      	lsls	r2, r1, #6
 80035c6:	4651      	mov	r1, sl
 80035c8:	ebb2 0801 	subs.w	r8, r2, r1
 80035cc:	4659      	mov	r1, fp
 80035ce:	eb63 0901 	sbc.w	r9, r3, r1
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e6:	4690      	mov	r8, r2
 80035e8:	4699      	mov	r9, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	eb18 0303 	adds.w	r3, r8, r3
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	462b      	mov	r3, r5
 80035f4:	eb49 0303 	adc.w	r3, r9, r3
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003606:	4629      	mov	r1, r5
 8003608:	024b      	lsls	r3, r1, #9
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003610:	4621      	mov	r1, r4
 8003612:	024a      	lsls	r2, r1, #9
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361a:	2200      	movs	r2, #0
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800361e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003624:	f7fc fe3c 	bl	80002a0 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003630:	e058      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	2200      	movs	r2, #0
 800363a:	4618      	mov	r0, r3
 800363c:	4611      	mov	r1, r2
 800363e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
 8003648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	f04f 0000 	mov.w	r0, #0
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	0159      	lsls	r1, r3, #5
 800365a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365e:	0150      	lsls	r0, r2, #5
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4641      	mov	r1, r8
 8003666:	ebb2 0a01 	subs.w	sl, r2, r1
 800366a:	4649      	mov	r1, r9
 800366c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800367c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003684:	ebb2 040a 	subs.w	r4, r2, sl
 8003688:	eb63 050b 	sbc.w	r5, r3, fp
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	00eb      	lsls	r3, r5, #3
 8003696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800369a:	00e2      	lsls	r2, r4, #3
 800369c:	4614      	mov	r4, r2
 800369e:	461d      	mov	r5, r3
 80036a0:	4643      	mov	r3, r8
 80036a2:	18e3      	adds	r3, r4, r3
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	464b      	mov	r3, r9
 80036a8:	eb45 0303 	adc.w	r3, r5, r3
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ba:	4629      	mov	r1, r5
 80036bc:	028b      	lsls	r3, r1, #10
 80036be:	4621      	mov	r1, r4
 80036c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c4:	4621      	mov	r1, r4
 80036c6:	028a      	lsls	r2, r1, #10
 80036c8:	4610      	mov	r0, r2
 80036ca:	4619      	mov	r1, r3
 80036cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ce:	2200      	movs	r2, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	61fa      	str	r2, [r7, #28]
 80036d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d8:	f7fc fde2 	bl	80002a0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036fe:	e002      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b05      	ldr	r3, [pc, #20]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x204>)
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003708:	4618      	mov	r0, r3
 800370a:	3750      	adds	r7, #80	@ 0x50
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	00f42400 	.word	0x00f42400
 800371c:	007a1200 	.word	0x007a1200

08003720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000008 	.word	0x20000008

08003738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800373c:	f7ff fff0 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0a9b      	lsrs	r3, r3, #10
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4903      	ldr	r1, [pc, #12]	@ (800375c <HAL_RCC_GetPCLK1Freq+0x24>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40023800 	.word	0x40023800
 800375c:	08005690 	.word	0x08005690

08003760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003764:	f7ff ffdc 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0b5b      	lsrs	r3, r3, #13
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4903      	ldr	r1, [pc, #12]	@ (8003784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	08005690 	.word	0x08005690

08003788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e042      	b.n	8003820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd fcce 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f973 	bl	8003ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	@ 0x28
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	d175      	bne.n	8003934 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Transmit+0x2c>
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e06e      	b.n	8003936 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2221      	movs	r2, #33	@ 0x21
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fd fdc3 	bl	80013f0 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003880:	d108      	bne.n	8003894 <HAL_UART_Transmit+0x6c>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e003      	b.n	800389c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800389c:	e02e      	b.n	80038fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	@ 0x80
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f848 	bl	800393e <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e03a      	b.n	8003936 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	3302      	adds	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	e007      	b.n	80038ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1cb      	bne.n	800389e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2140      	movs	r1, #64	@ 0x40
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f814 	bl	800393e <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e006      	b.n	8003936 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394e:	e03b      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d037      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7fd fd4a 	bl	80013f0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <UART_WaitOnFlagUntilTimeout+0x30>
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e03a      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d023      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b80      	cmp	r3, #128	@ 0x80
 8003984:	d020      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d01d      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b08      	cmp	r3, #8
 8003998:	d116      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f81d 	bl	80039f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2208      	movs	r2, #8
 80039ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e00f      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d0b4      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b095      	sub	sp, #84	@ 0x54
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a18:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e5      	bne.n	80039f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d119      	bne.n	8003a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a88:	61ba      	str	r2, [r7, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	613b      	str	r3, [r7, #16]
   return(result);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003aaa:	bf00      	nop
 8003aac:	3754      	adds	r7, #84	@ 0x54
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0c0      	sub	sp, #256	@ 0x100
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	68d9      	ldr	r1, [r3, #12]
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	ea40 0301 	orr.w	r3, r0, r1
 8003ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b10:	f021 010c 	bic.w	r1, r1, #12
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	6999      	ldr	r1, [r3, #24]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	ea40 0301 	orr.w	r3, r0, r1
 8003b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b8f      	ldr	r3, [pc, #572]	@ (8003d84 <UART_SetConfig+0x2cc>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d005      	beq.n	8003b58 <UART_SetConfig+0xa0>
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b8d      	ldr	r3, [pc, #564]	@ (8003d88 <UART_SetConfig+0x2d0>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d104      	bne.n	8003b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7ff fe02 	bl	8003760 <HAL_RCC_GetPCLK2Freq>
 8003b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b60:	e003      	b.n	8003b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b62:	f7ff fde9 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8003b66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b74:	f040 810c 	bne.w	8003d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b92:	415b      	adcs	r3, r3
 8003b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb43 0901 	adc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bc8:	462b      	mov	r3, r5
 8003bca:	eb49 0303 	adc.w	r3, r9, r3
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003be6:	460b      	mov	r3, r1
 8003be8:	18db      	adds	r3, r3, r3
 8003bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bec:	4613      	mov	r3, r2
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bfc:	f7fc fb50 	bl	80002a0 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b61      	ldr	r3, [pc, #388]	@ (8003d8c <UART_SetConfig+0x2d4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011c      	lsls	r4, r3, #4
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c30:	4641      	mov	r1, r8
 8003c32:	eb12 0a01 	adds.w	sl, r2, r1
 8003c36:	4649      	mov	r1, r9
 8003c38:	eb43 0b01 	adc.w	fp, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c50:	4692      	mov	sl, r2
 8003c52:	469b      	mov	fp, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	eb1a 0303 	adds.w	r3, sl, r3
 8003c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb4b 0303 	adc.w	r3, fp, r3
 8003c64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c92:	f7fc fb05 	bl	80002a0 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <UART_SetConfig+0x2d4>)
 8003c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2264      	movs	r2, #100	@ 0x64
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cb2:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cc0:	441c      	add	r4, r3
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d18:	464b      	mov	r3, r9
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d38:	460b      	mov	r3, r1
 8003d3a:	18db      	adds	r3, r3, r3
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d3e:	4613      	mov	r3, r2
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d4e:	f7fc faa7 	bl	80002a0 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <UART_SetConfig+0x2d4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	@ 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3332      	adds	r3, #50	@ 0x32
 8003d6a:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <UART_SetConfig+0x2d4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 0207 	and.w	r2, r3, #7
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4422      	add	r2, r4
 8003d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d80:	e106      	b.n	8003f90 <UART_SetConfig+0x4d8>
 8003d82:	bf00      	nop
 8003d84:	40011000 	.word	0x40011000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	6239      	str	r1, [r7, #32]
 8003daa:	415b      	adcs	r3, r3
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db2:	4641      	mov	r1, r8
 8003db4:	1854      	adds	r4, r2, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	eb43 0501 	adc.w	r5, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dd8:	464b      	mov	r3, r9
 8003dda:	eb45 0303 	adc.w	r3, r5, r3
 8003dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dfe:	4629      	mov	r1, r5
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e08:	4621      	mov	r1, r4
 8003e0a:	008a      	lsls	r2, r1, #2
 8003e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e10:	f7fc fa46 	bl	80002a0 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b60      	ldr	r3, [pc, #384]	@ (8003f9c <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	011c      	lsls	r4, r3, #4
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	61b9      	str	r1, [r7, #24]
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e44:	4641      	mov	r1, r8
 8003e46:	1851      	adds	r1, r2, r1
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	00cb      	lsls	r3, r1, #3
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e66:	4651      	mov	r1, sl
 8003e68:	00ca      	lsls	r2, r1, #3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4642      	mov	r2, r8
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e78:	464b      	mov	r3, r9
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	008a      	lsls	r2, r1, #2
 8003eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003eae:	f7fc f9f7 	bl	80002a0 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <UART_SetConfig+0x4e4>)
 8003eba:	fba3 2301 	umull	r2, r3, r3, r1
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2264      	movs	r2, #100	@ 0x64
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	1acb      	subs	r3, r1, r3
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	3332      	adds	r3, #50	@ 0x32
 8003ecc:	4a33      	ldr	r2, [pc, #204]	@ (8003f9c <UART_SetConfig+0x4e4>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ed8:	441c      	add	r4, r3
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ee2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ee4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef8:	4641      	mov	r1, r8
 8003efa:	1851      	adds	r1, r2, r1
 8003efc:	6039      	str	r1, [r7, #0]
 8003efe:	4649      	mov	r1, r9
 8003f00:	414b      	adcs	r3, r1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f10:	4659      	mov	r1, fp
 8003f12:	00cb      	lsls	r3, r1, #3
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	00ca      	lsls	r2, r1, #3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	4642      	mov	r2, r8
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	eb42 0303 	adc.w	r3, r2, r3
 8003f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	008b      	lsls	r3, r1, #2
 8003f50:	4641      	mov	r1, r8
 8003f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f56:	4641      	mov	r1, r8
 8003f58:	008a      	lsls	r2, r1, #2
 8003f5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f5e:	f7fc f99f 	bl	80002a0 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <UART_SetConfig+0x4e4>)
 8003f68:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2164      	movs	r1, #100	@ 0x64
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	3332      	adds	r3, #50	@ 0x32
 8003f7a:	4a08      	ldr	r2, [pc, #32]	@ (8003f9c <UART_SetConfig+0x4e4>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4422      	add	r2, r4
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f96:	46bd      	mov	sp, r7
 8003f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9c:	51eb851f 	.word	0x51eb851f

08003fa0 <siprintf>:
 8003fa0:	b40e      	push	{r1, r2, r3}
 8003fa2:	b500      	push	{lr}
 8003fa4:	b09c      	sub	sp, #112	@ 0x70
 8003fa6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fa8:	9002      	str	r0, [sp, #8]
 8003faa:	9006      	str	r0, [sp, #24]
 8003fac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fb0:	4809      	ldr	r0, [pc, #36]	@ (8003fd8 <siprintf+0x38>)
 8003fb2:	9107      	str	r1, [sp, #28]
 8003fb4:	9104      	str	r1, [sp, #16]
 8003fb6:	4909      	ldr	r1, [pc, #36]	@ (8003fdc <siprintf+0x3c>)
 8003fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fbc:	9105      	str	r1, [sp, #20]
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	a902      	add	r1, sp, #8
 8003fc4:	f000 f994 	bl	80042f0 <_svfiprintf_r>
 8003fc8:	9b02      	ldr	r3, [sp, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	b01c      	add	sp, #112	@ 0x70
 8003fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd4:	b003      	add	sp, #12
 8003fd6:	4770      	bx	lr
 8003fd8:	20000014 	.word	0x20000014
 8003fdc:	ffff0208 	.word	0xffff0208

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <__errno>:
 8003ff0:	4b01      	ldr	r3, [pc, #4]	@ (8003ff8 <__errno+0x8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000014 	.word	0x20000014

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	@ (8004038 <__libc_init_array+0x3c>)
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2600      	movs	r6, #0
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4d0b      	ldr	r5, [pc, #44]	@ (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	@ (8004040 <__libc_init_array+0x44>)
 8004010:	f000 fc66 	bl	80048e0 <_init>
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2600      	movs	r6, #0
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	080056d4 	.word	0x080056d4
 8004038:	080056d4 	.word	0x080056d4
 800403c:	080056d4 	.word	0x080056d4
 8004040:	080056d8 	.word	0x080056d8

08004044 <__retarget_lock_acquire_recursive>:
 8004044:	4770      	bx	lr

08004046 <__retarget_lock_release_recursive>:
 8004046:	4770      	bx	lr

08004048 <_free_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4605      	mov	r5, r0
 800404c:	2900      	cmp	r1, #0
 800404e:	d041      	beq.n	80040d4 <_free_r+0x8c>
 8004050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004054:	1f0c      	subs	r4, r1, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfb8      	it	lt
 800405a:	18e4      	addlt	r4, r4, r3
 800405c:	f000 f8e0 	bl	8004220 <__malloc_lock>
 8004060:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <_free_r+0x90>)
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	b933      	cbnz	r3, 8004074 <_free_r+0x2c>
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	6014      	str	r4, [r2, #0]
 800406a:	4628      	mov	r0, r5
 800406c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004070:	f000 b8dc 	b.w	800422c <__malloc_unlock>
 8004074:	42a3      	cmp	r3, r4
 8004076:	d908      	bls.n	800408a <_free_r+0x42>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	1821      	adds	r1, r4, r0
 800407c:	428b      	cmp	r3, r1
 800407e:	bf01      	itttt	eq
 8004080:	6819      	ldreq	r1, [r3, #0]
 8004082:	685b      	ldreq	r3, [r3, #4]
 8004084:	1809      	addeq	r1, r1, r0
 8004086:	6021      	streq	r1, [r4, #0]
 8004088:	e7ed      	b.n	8004066 <_free_r+0x1e>
 800408a:	461a      	mov	r2, r3
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b10b      	cbz	r3, 8004094 <_free_r+0x4c>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d9fa      	bls.n	800408a <_free_r+0x42>
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	1850      	adds	r0, r2, r1
 8004098:	42a0      	cmp	r0, r4
 800409a:	d10b      	bne.n	80040b4 <_free_r+0x6c>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	4401      	add	r1, r0
 80040a0:	1850      	adds	r0, r2, r1
 80040a2:	4283      	cmp	r3, r0
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	d1e0      	bne.n	800406a <_free_r+0x22>
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6053      	str	r3, [r2, #4]
 80040ae:	4408      	add	r0, r1
 80040b0:	6010      	str	r0, [r2, #0]
 80040b2:	e7da      	b.n	800406a <_free_r+0x22>
 80040b4:	d902      	bls.n	80040bc <_free_r+0x74>
 80040b6:	230c      	movs	r3, #12
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	e7d6      	b.n	800406a <_free_r+0x22>
 80040bc:	6820      	ldr	r0, [r4, #0]
 80040be:	1821      	adds	r1, r4, r0
 80040c0:	428b      	cmp	r3, r1
 80040c2:	bf04      	itt	eq
 80040c4:	6819      	ldreq	r1, [r3, #0]
 80040c6:	685b      	ldreq	r3, [r3, #4]
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	bf04      	itt	eq
 80040cc:	1809      	addeq	r1, r1, r0
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	6054      	str	r4, [r2, #4]
 80040d2:	e7ca      	b.n	800406a <_free_r+0x22>
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	bf00      	nop
 80040d8:	20000700 	.word	0x20000700

080040dc <sbrk_aligned>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4e0f      	ldr	r6, [pc, #60]	@ (800411c <sbrk_aligned+0x40>)
 80040e0:	460c      	mov	r4, r1
 80040e2:	6831      	ldr	r1, [r6, #0]
 80040e4:	4605      	mov	r5, r0
 80040e6:	b911      	cbnz	r1, 80040ee <sbrk_aligned+0x12>
 80040e8:	f000 fba6 	bl	8004838 <_sbrk_r>
 80040ec:	6030      	str	r0, [r6, #0]
 80040ee:	4621      	mov	r1, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 fba1 	bl	8004838 <_sbrk_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d103      	bne.n	8004102 <sbrk_aligned+0x26>
 80040fa:	f04f 34ff 	mov.w	r4, #4294967295
 80040fe:	4620      	mov	r0, r4
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	1cc4      	adds	r4, r0, #3
 8004104:	f024 0403 	bic.w	r4, r4, #3
 8004108:	42a0      	cmp	r0, r4
 800410a:	d0f8      	beq.n	80040fe <sbrk_aligned+0x22>
 800410c:	1a21      	subs	r1, r4, r0
 800410e:	4628      	mov	r0, r5
 8004110:	f000 fb92 	bl	8004838 <_sbrk_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d1f2      	bne.n	80040fe <sbrk_aligned+0x22>
 8004118:	e7ef      	b.n	80040fa <sbrk_aligned+0x1e>
 800411a:	bf00      	nop
 800411c:	200006fc 	.word	0x200006fc

08004120 <_malloc_r>:
 8004120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004124:	1ccd      	adds	r5, r1, #3
 8004126:	f025 0503 	bic.w	r5, r5, #3
 800412a:	3508      	adds	r5, #8
 800412c:	2d0c      	cmp	r5, #12
 800412e:	bf38      	it	cc
 8004130:	250c      	movcc	r5, #12
 8004132:	2d00      	cmp	r5, #0
 8004134:	4606      	mov	r6, r0
 8004136:	db01      	blt.n	800413c <_malloc_r+0x1c>
 8004138:	42a9      	cmp	r1, r5
 800413a:	d904      	bls.n	8004146 <_malloc_r+0x26>
 800413c:	230c      	movs	r3, #12
 800413e:	6033      	str	r3, [r6, #0]
 8004140:	2000      	movs	r0, #0
 8004142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800421c <_malloc_r+0xfc>
 800414a:	f000 f869 	bl	8004220 <__malloc_lock>
 800414e:	f8d8 3000 	ldr.w	r3, [r8]
 8004152:	461c      	mov	r4, r3
 8004154:	bb44      	cbnz	r4, 80041a8 <_malloc_r+0x88>
 8004156:	4629      	mov	r1, r5
 8004158:	4630      	mov	r0, r6
 800415a:	f7ff ffbf 	bl	80040dc <sbrk_aligned>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	4604      	mov	r4, r0
 8004162:	d158      	bne.n	8004216 <_malloc_r+0xf6>
 8004164:	f8d8 4000 	ldr.w	r4, [r8]
 8004168:	4627      	mov	r7, r4
 800416a:	2f00      	cmp	r7, #0
 800416c:	d143      	bne.n	80041f6 <_malloc_r+0xd6>
 800416e:	2c00      	cmp	r4, #0
 8004170:	d04b      	beq.n	800420a <_malloc_r+0xea>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	4639      	mov	r1, r7
 8004176:	4630      	mov	r0, r6
 8004178:	eb04 0903 	add.w	r9, r4, r3
 800417c:	f000 fb5c 	bl	8004838 <_sbrk_r>
 8004180:	4581      	cmp	r9, r0
 8004182:	d142      	bne.n	800420a <_malloc_r+0xea>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	1a6d      	subs	r5, r5, r1
 8004188:	4629      	mov	r1, r5
 800418a:	4630      	mov	r0, r6
 800418c:	f7ff ffa6 	bl	80040dc <sbrk_aligned>
 8004190:	3001      	adds	r0, #1
 8004192:	d03a      	beq.n	800420a <_malloc_r+0xea>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	442b      	add	r3, r5
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	f8d8 3000 	ldr.w	r3, [r8]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	bb62      	cbnz	r2, 80041fc <_malloc_r+0xdc>
 80041a2:	f8c8 7000 	str.w	r7, [r8]
 80041a6:	e00f      	b.n	80041c8 <_malloc_r+0xa8>
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	1b52      	subs	r2, r2, r5
 80041ac:	d420      	bmi.n	80041f0 <_malloc_r+0xd0>
 80041ae:	2a0b      	cmp	r2, #11
 80041b0:	d917      	bls.n	80041e2 <_malloc_r+0xc2>
 80041b2:	1961      	adds	r1, r4, r5
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	6025      	str	r5, [r4, #0]
 80041b8:	bf18      	it	ne
 80041ba:	6059      	strne	r1, [r3, #4]
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	bf08      	it	eq
 80041c0:	f8c8 1000 	streq.w	r1, [r8]
 80041c4:	5162      	str	r2, [r4, r5]
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f82f 	bl	800422c <__malloc_unlock>
 80041ce:	f104 000b 	add.w	r0, r4, #11
 80041d2:	1d23      	adds	r3, r4, #4
 80041d4:	f020 0007 	bic.w	r0, r0, #7
 80041d8:	1ac2      	subs	r2, r0, r3
 80041da:	bf1c      	itt	ne
 80041dc:	1a1b      	subne	r3, r3, r0
 80041de:	50a3      	strne	r3, [r4, r2]
 80041e0:	e7af      	b.n	8004142 <_malloc_r+0x22>
 80041e2:	6862      	ldr	r2, [r4, #4]
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	bf0c      	ite	eq
 80041e8:	f8c8 2000 	streq.w	r2, [r8]
 80041ec:	605a      	strne	r2, [r3, #4]
 80041ee:	e7eb      	b.n	80041c8 <_malloc_r+0xa8>
 80041f0:	4623      	mov	r3, r4
 80041f2:	6864      	ldr	r4, [r4, #4]
 80041f4:	e7ae      	b.n	8004154 <_malloc_r+0x34>
 80041f6:	463c      	mov	r4, r7
 80041f8:	687f      	ldr	r7, [r7, #4]
 80041fa:	e7b6      	b.n	800416a <_malloc_r+0x4a>
 80041fc:	461a      	mov	r2, r3
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	42a3      	cmp	r3, r4
 8004202:	d1fb      	bne.n	80041fc <_malloc_r+0xdc>
 8004204:	2300      	movs	r3, #0
 8004206:	6053      	str	r3, [r2, #4]
 8004208:	e7de      	b.n	80041c8 <_malloc_r+0xa8>
 800420a:	230c      	movs	r3, #12
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	4630      	mov	r0, r6
 8004210:	f000 f80c 	bl	800422c <__malloc_unlock>
 8004214:	e794      	b.n	8004140 <_malloc_r+0x20>
 8004216:	6005      	str	r5, [r0, #0]
 8004218:	e7d6      	b.n	80041c8 <_malloc_r+0xa8>
 800421a:	bf00      	nop
 800421c:	20000700 	.word	0x20000700

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	@ (8004228 <__malloc_lock+0x8>)
 8004222:	f7ff bf0f 	b.w	8004044 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	200006f8 	.word	0x200006f8

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	@ (8004234 <__malloc_unlock+0x8>)
 800422e:	f7ff bf0a 	b.w	8004046 <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	200006f8 	.word	0x200006f8

08004238 <__ssputs_r>:
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800423c:	688e      	ldr	r6, [r1, #8]
 800423e:	461f      	mov	r7, r3
 8004240:	42be      	cmp	r6, r7
 8004242:	680b      	ldr	r3, [r1, #0]
 8004244:	4682      	mov	sl, r0
 8004246:	460c      	mov	r4, r1
 8004248:	4690      	mov	r8, r2
 800424a:	d82d      	bhi.n	80042a8 <__ssputs_r+0x70>
 800424c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004254:	d026      	beq.n	80042a4 <__ssputs_r+0x6c>
 8004256:	6965      	ldr	r5, [r4, #20]
 8004258:	6909      	ldr	r1, [r1, #16]
 800425a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800425e:	eba3 0901 	sub.w	r9, r3, r1
 8004262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004266:	1c7b      	adds	r3, r7, #1
 8004268:	444b      	add	r3, r9
 800426a:	106d      	asrs	r5, r5, #1
 800426c:	429d      	cmp	r5, r3
 800426e:	bf38      	it	cc
 8004270:	461d      	movcc	r5, r3
 8004272:	0553      	lsls	r3, r2, #21
 8004274:	d527      	bpl.n	80042c6 <__ssputs_r+0x8e>
 8004276:	4629      	mov	r1, r5
 8004278:	f7ff ff52 	bl	8004120 <_malloc_r>
 800427c:	4606      	mov	r6, r0
 800427e:	b360      	cbz	r0, 80042da <__ssputs_r+0xa2>
 8004280:	6921      	ldr	r1, [r4, #16]
 8004282:	464a      	mov	r2, r9
 8004284:	f000 fae8 	bl	8004858 <memcpy>
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	6126      	str	r6, [r4, #16]
 8004296:	6165      	str	r5, [r4, #20]
 8004298:	444e      	add	r6, r9
 800429a:	eba5 0509 	sub.w	r5, r5, r9
 800429e:	6026      	str	r6, [r4, #0]
 80042a0:	60a5      	str	r5, [r4, #8]
 80042a2:	463e      	mov	r6, r7
 80042a4:	42be      	cmp	r6, r7
 80042a6:	d900      	bls.n	80042aa <__ssputs_r+0x72>
 80042a8:	463e      	mov	r6, r7
 80042aa:	6820      	ldr	r0, [r4, #0]
 80042ac:	4632      	mov	r2, r6
 80042ae:	4641      	mov	r1, r8
 80042b0:	f000 faa8 	bl	8004804 <memmove>
 80042b4:	68a3      	ldr	r3, [r4, #8]
 80042b6:	1b9b      	subs	r3, r3, r6
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4433      	add	r3, r6
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	2000      	movs	r0, #0
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	462a      	mov	r2, r5
 80042c8:	f000 fad4 	bl	8004874 <_realloc_r>
 80042cc:	4606      	mov	r6, r0
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d1e0      	bne.n	8004294 <__ssputs_r+0x5c>
 80042d2:	6921      	ldr	r1, [r4, #16]
 80042d4:	4650      	mov	r0, sl
 80042d6:	f7ff feb7 	bl	8004048 <_free_r>
 80042da:	230c      	movs	r3, #12
 80042dc:	f8ca 3000 	str.w	r3, [sl]
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e7e9      	b.n	80042c2 <__ssputs_r+0x8a>
	...

080042f0 <_svfiprintf_r>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	4698      	mov	r8, r3
 80042f6:	898b      	ldrh	r3, [r1, #12]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	b09d      	sub	sp, #116	@ 0x74
 80042fc:	4607      	mov	r7, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	4614      	mov	r4, r2
 8004302:	d510      	bpl.n	8004326 <_svfiprintf_r+0x36>
 8004304:	690b      	ldr	r3, [r1, #16]
 8004306:	b973      	cbnz	r3, 8004326 <_svfiprintf_r+0x36>
 8004308:	2140      	movs	r1, #64	@ 0x40
 800430a:	f7ff ff09 	bl	8004120 <_malloc_r>
 800430e:	6028      	str	r0, [r5, #0]
 8004310:	6128      	str	r0, [r5, #16]
 8004312:	b930      	cbnz	r0, 8004322 <_svfiprintf_r+0x32>
 8004314:	230c      	movs	r3, #12
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	b01d      	add	sp, #116	@ 0x74
 800431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004322:	2340      	movs	r3, #64	@ 0x40
 8004324:	616b      	str	r3, [r5, #20]
 8004326:	2300      	movs	r3, #0
 8004328:	9309      	str	r3, [sp, #36]	@ 0x24
 800432a:	2320      	movs	r3, #32
 800432c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004330:	f8cd 800c 	str.w	r8, [sp, #12]
 8004334:	2330      	movs	r3, #48	@ 0x30
 8004336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044d4 <_svfiprintf_r+0x1e4>
 800433a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800433e:	f04f 0901 	mov.w	r9, #1
 8004342:	4623      	mov	r3, r4
 8004344:	469a      	mov	sl, r3
 8004346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800434a:	b10a      	cbz	r2, 8004350 <_svfiprintf_r+0x60>
 800434c:	2a25      	cmp	r2, #37	@ 0x25
 800434e:	d1f9      	bne.n	8004344 <_svfiprintf_r+0x54>
 8004350:	ebba 0b04 	subs.w	fp, sl, r4
 8004354:	d00b      	beq.n	800436e <_svfiprintf_r+0x7e>
 8004356:	465b      	mov	r3, fp
 8004358:	4622      	mov	r2, r4
 800435a:	4629      	mov	r1, r5
 800435c:	4638      	mov	r0, r7
 800435e:	f7ff ff6b 	bl	8004238 <__ssputs_r>
 8004362:	3001      	adds	r0, #1
 8004364:	f000 80a7 	beq.w	80044b6 <_svfiprintf_r+0x1c6>
 8004368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800436a:	445a      	add	r2, fp
 800436c:	9209      	str	r2, [sp, #36]	@ 0x24
 800436e:	f89a 3000 	ldrb.w	r3, [sl]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 809f 	beq.w	80044b6 <_svfiprintf_r+0x1c6>
 8004378:	2300      	movs	r3, #0
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004382:	f10a 0a01 	add.w	sl, sl, #1
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	9307      	str	r3, [sp, #28]
 800438a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800438e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004390:	4654      	mov	r4, sl
 8004392:	2205      	movs	r2, #5
 8004394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004398:	484e      	ldr	r0, [pc, #312]	@ (80044d4 <_svfiprintf_r+0x1e4>)
 800439a:	f7fb ff31 	bl	8000200 <memchr>
 800439e:	9a04      	ldr	r2, [sp, #16]
 80043a0:	b9d8      	cbnz	r0, 80043da <_svfiprintf_r+0xea>
 80043a2:	06d0      	lsls	r0, r2, #27
 80043a4:	bf44      	itt	mi
 80043a6:	2320      	movmi	r3, #32
 80043a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ac:	0711      	lsls	r1, r2, #28
 80043ae:	bf44      	itt	mi
 80043b0:	232b      	movmi	r3, #43	@ 0x2b
 80043b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043b6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80043bc:	d015      	beq.n	80043ea <_svfiprintf_r+0xfa>
 80043be:	9a07      	ldr	r2, [sp, #28]
 80043c0:	4654      	mov	r4, sl
 80043c2:	2000      	movs	r0, #0
 80043c4:	f04f 0c0a 	mov.w	ip, #10
 80043c8:	4621      	mov	r1, r4
 80043ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ce:	3b30      	subs	r3, #48	@ 0x30
 80043d0:	2b09      	cmp	r3, #9
 80043d2:	d94b      	bls.n	800446c <_svfiprintf_r+0x17c>
 80043d4:	b1b0      	cbz	r0, 8004404 <_svfiprintf_r+0x114>
 80043d6:	9207      	str	r2, [sp, #28]
 80043d8:	e014      	b.n	8004404 <_svfiprintf_r+0x114>
 80043da:	eba0 0308 	sub.w	r3, r0, r8
 80043de:	fa09 f303 	lsl.w	r3, r9, r3
 80043e2:	4313      	orrs	r3, r2
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	46a2      	mov	sl, r4
 80043e8:	e7d2      	b.n	8004390 <_svfiprintf_r+0xa0>
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	1d19      	adds	r1, r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	9103      	str	r1, [sp, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfbb      	ittet	lt
 80043f6:	425b      	neglt	r3, r3
 80043f8:	f042 0202 	orrlt.w	r2, r2, #2
 80043fc:	9307      	strge	r3, [sp, #28]
 80043fe:	9307      	strlt	r3, [sp, #28]
 8004400:	bfb8      	it	lt
 8004402:	9204      	strlt	r2, [sp, #16]
 8004404:	7823      	ldrb	r3, [r4, #0]
 8004406:	2b2e      	cmp	r3, #46	@ 0x2e
 8004408:	d10a      	bne.n	8004420 <_svfiprintf_r+0x130>
 800440a:	7863      	ldrb	r3, [r4, #1]
 800440c:	2b2a      	cmp	r3, #42	@ 0x2a
 800440e:	d132      	bne.n	8004476 <_svfiprintf_r+0x186>
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	1d1a      	adds	r2, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	9203      	str	r2, [sp, #12]
 8004418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800441c:	3402      	adds	r4, #2
 800441e:	9305      	str	r3, [sp, #20]
 8004420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044e4 <_svfiprintf_r+0x1f4>
 8004424:	7821      	ldrb	r1, [r4, #0]
 8004426:	2203      	movs	r2, #3
 8004428:	4650      	mov	r0, sl
 800442a:	f7fb fee9 	bl	8000200 <memchr>
 800442e:	b138      	cbz	r0, 8004440 <_svfiprintf_r+0x150>
 8004430:	9b04      	ldr	r3, [sp, #16]
 8004432:	eba0 000a 	sub.w	r0, r0, sl
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	4082      	lsls	r2, r0
 800443a:	4313      	orrs	r3, r2
 800443c:	3401      	adds	r4, #1
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004444:	4824      	ldr	r0, [pc, #144]	@ (80044d8 <_svfiprintf_r+0x1e8>)
 8004446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800444a:	2206      	movs	r2, #6
 800444c:	f7fb fed8 	bl	8000200 <memchr>
 8004450:	2800      	cmp	r0, #0
 8004452:	d036      	beq.n	80044c2 <_svfiprintf_r+0x1d2>
 8004454:	4b21      	ldr	r3, [pc, #132]	@ (80044dc <_svfiprintf_r+0x1ec>)
 8004456:	bb1b      	cbnz	r3, 80044a0 <_svfiprintf_r+0x1b0>
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	3307      	adds	r3, #7
 800445c:	f023 0307 	bic.w	r3, r3, #7
 8004460:	3308      	adds	r3, #8
 8004462:	9303      	str	r3, [sp, #12]
 8004464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004466:	4433      	add	r3, r6
 8004468:	9309      	str	r3, [sp, #36]	@ 0x24
 800446a:	e76a      	b.n	8004342 <_svfiprintf_r+0x52>
 800446c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004470:	460c      	mov	r4, r1
 8004472:	2001      	movs	r0, #1
 8004474:	e7a8      	b.n	80043c8 <_svfiprintf_r+0xd8>
 8004476:	2300      	movs	r3, #0
 8004478:	3401      	adds	r4, #1
 800447a:	9305      	str	r3, [sp, #20]
 800447c:	4619      	mov	r1, r3
 800447e:	f04f 0c0a 	mov.w	ip, #10
 8004482:	4620      	mov	r0, r4
 8004484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004488:	3a30      	subs	r2, #48	@ 0x30
 800448a:	2a09      	cmp	r2, #9
 800448c:	d903      	bls.n	8004496 <_svfiprintf_r+0x1a6>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0c6      	beq.n	8004420 <_svfiprintf_r+0x130>
 8004492:	9105      	str	r1, [sp, #20]
 8004494:	e7c4      	b.n	8004420 <_svfiprintf_r+0x130>
 8004496:	fb0c 2101 	mla	r1, ip, r1, r2
 800449a:	4604      	mov	r4, r0
 800449c:	2301      	movs	r3, #1
 800449e:	e7f0      	b.n	8004482 <_svfiprintf_r+0x192>
 80044a0:	ab03      	add	r3, sp, #12
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	462a      	mov	r2, r5
 80044a6:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <_svfiprintf_r+0x1f0>)
 80044a8:	a904      	add	r1, sp, #16
 80044aa:	4638      	mov	r0, r7
 80044ac:	f3af 8000 	nop.w
 80044b0:	1c42      	adds	r2, r0, #1
 80044b2:	4606      	mov	r6, r0
 80044b4:	d1d6      	bne.n	8004464 <_svfiprintf_r+0x174>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	065b      	lsls	r3, r3, #25
 80044ba:	f53f af2d 	bmi.w	8004318 <_svfiprintf_r+0x28>
 80044be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044c0:	e72c      	b.n	800431c <_svfiprintf_r+0x2c>
 80044c2:	ab03      	add	r3, sp, #12
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	462a      	mov	r2, r5
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <_svfiprintf_r+0x1f0>)
 80044ca:	a904      	add	r1, sp, #16
 80044cc:	4638      	mov	r0, r7
 80044ce:	f000 f879 	bl	80045c4 <_printf_i>
 80044d2:	e7ed      	b.n	80044b0 <_svfiprintf_r+0x1c0>
 80044d4:	08005698 	.word	0x08005698
 80044d8:	080056a2 	.word	0x080056a2
 80044dc:	00000000 	.word	0x00000000
 80044e0:	08004239 	.word	0x08004239
 80044e4:	0800569e 	.word	0x0800569e

080044e8 <_printf_common>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	4616      	mov	r6, r2
 80044ee:	4698      	mov	r8, r3
 80044f0:	688a      	ldr	r2, [r1, #8]
 80044f2:	690b      	ldr	r3, [r1, #16]
 80044f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044f8:	4293      	cmp	r3, r2
 80044fa:	bfb8      	it	lt
 80044fc:	4613      	movlt	r3, r2
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004504:	4607      	mov	r7, r0
 8004506:	460c      	mov	r4, r1
 8004508:	b10a      	cbz	r2, 800450e <_printf_common+0x26>
 800450a:	3301      	adds	r3, #1
 800450c:	6033      	str	r3, [r6, #0]
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	0699      	lsls	r1, r3, #26
 8004512:	bf42      	ittt	mi
 8004514:	6833      	ldrmi	r3, [r6, #0]
 8004516:	3302      	addmi	r3, #2
 8004518:	6033      	strmi	r3, [r6, #0]
 800451a:	6825      	ldr	r5, [r4, #0]
 800451c:	f015 0506 	ands.w	r5, r5, #6
 8004520:	d106      	bne.n	8004530 <_printf_common+0x48>
 8004522:	f104 0a19 	add.w	sl, r4, #25
 8004526:	68e3      	ldr	r3, [r4, #12]
 8004528:	6832      	ldr	r2, [r6, #0]
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	42ab      	cmp	r3, r5
 800452e:	dc26      	bgt.n	800457e <_printf_common+0x96>
 8004530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	3b00      	subs	r3, #0
 8004538:	bf18      	it	ne
 800453a:	2301      	movne	r3, #1
 800453c:	0692      	lsls	r2, r2, #26
 800453e:	d42b      	bmi.n	8004598 <_printf_common+0xb0>
 8004540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004544:	4641      	mov	r1, r8
 8004546:	4638      	mov	r0, r7
 8004548:	47c8      	blx	r9
 800454a:	3001      	adds	r0, #1
 800454c:	d01e      	beq.n	800458c <_printf_common+0xa4>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	6922      	ldr	r2, [r4, #16]
 8004552:	f003 0306 	and.w	r3, r3, #6
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf02      	ittt	eq
 800455a:	68e5      	ldreq	r5, [r4, #12]
 800455c:	6833      	ldreq	r3, [r6, #0]
 800455e:	1aed      	subeq	r5, r5, r3
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	bf0c      	ite	eq
 8004564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004568:	2500      	movne	r5, #0
 800456a:	4293      	cmp	r3, r2
 800456c:	bfc4      	itt	gt
 800456e:	1a9b      	subgt	r3, r3, r2
 8004570:	18ed      	addgt	r5, r5, r3
 8004572:	2600      	movs	r6, #0
 8004574:	341a      	adds	r4, #26
 8004576:	42b5      	cmp	r5, r6
 8004578:	d11a      	bne.n	80045b0 <_printf_common+0xc8>
 800457a:	2000      	movs	r0, #0
 800457c:	e008      	b.n	8004590 <_printf_common+0xa8>
 800457e:	2301      	movs	r3, #1
 8004580:	4652      	mov	r2, sl
 8004582:	4641      	mov	r1, r8
 8004584:	4638      	mov	r0, r7
 8004586:	47c8      	blx	r9
 8004588:	3001      	adds	r0, #1
 800458a:	d103      	bne.n	8004594 <_printf_common+0xac>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	3501      	adds	r5, #1
 8004596:	e7c6      	b.n	8004526 <_printf_common+0x3e>
 8004598:	18e1      	adds	r1, r4, r3
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	2030      	movs	r0, #48	@ 0x30
 800459e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045a2:	4422      	add	r2, r4
 80045a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045ac:	3302      	adds	r3, #2
 80045ae:	e7c7      	b.n	8004540 <_printf_common+0x58>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4622      	mov	r2, r4
 80045b4:	4641      	mov	r1, r8
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c8      	blx	r9
 80045ba:	3001      	adds	r0, #1
 80045bc:	d0e6      	beq.n	800458c <_printf_common+0xa4>
 80045be:	3601      	adds	r6, #1
 80045c0:	e7d9      	b.n	8004576 <_printf_common+0x8e>
	...

080045c4 <_printf_i>:
 80045c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c8:	7e0f      	ldrb	r7, [r1, #24]
 80045ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045cc:	2f78      	cmp	r7, #120	@ 0x78
 80045ce:	4691      	mov	r9, r2
 80045d0:	4680      	mov	r8, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	469a      	mov	sl, r3
 80045d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045da:	d807      	bhi.n	80045ec <_printf_i+0x28>
 80045dc:	2f62      	cmp	r7, #98	@ 0x62
 80045de:	d80a      	bhi.n	80045f6 <_printf_i+0x32>
 80045e0:	2f00      	cmp	r7, #0
 80045e2:	f000 80d2 	beq.w	800478a <_printf_i+0x1c6>
 80045e6:	2f58      	cmp	r7, #88	@ 0x58
 80045e8:	f000 80b9 	beq.w	800475e <_printf_i+0x19a>
 80045ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045f4:	e03a      	b.n	800466c <_printf_i+0xa8>
 80045f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045fa:	2b15      	cmp	r3, #21
 80045fc:	d8f6      	bhi.n	80045ec <_printf_i+0x28>
 80045fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004604 <_printf_i+0x40>)
 8004600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004604:	0800465d 	.word	0x0800465d
 8004608:	08004671 	.word	0x08004671
 800460c:	080045ed 	.word	0x080045ed
 8004610:	080045ed 	.word	0x080045ed
 8004614:	080045ed 	.word	0x080045ed
 8004618:	080045ed 	.word	0x080045ed
 800461c:	08004671 	.word	0x08004671
 8004620:	080045ed 	.word	0x080045ed
 8004624:	080045ed 	.word	0x080045ed
 8004628:	080045ed 	.word	0x080045ed
 800462c:	080045ed 	.word	0x080045ed
 8004630:	08004771 	.word	0x08004771
 8004634:	0800469b 	.word	0x0800469b
 8004638:	0800472b 	.word	0x0800472b
 800463c:	080045ed 	.word	0x080045ed
 8004640:	080045ed 	.word	0x080045ed
 8004644:	08004793 	.word	0x08004793
 8004648:	080045ed 	.word	0x080045ed
 800464c:	0800469b 	.word	0x0800469b
 8004650:	080045ed 	.word	0x080045ed
 8004654:	080045ed 	.word	0x080045ed
 8004658:	08004733 	.word	0x08004733
 800465c:	6833      	ldr	r3, [r6, #0]
 800465e:	1d1a      	adds	r2, r3, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6032      	str	r2, [r6, #0]
 8004664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800466c:	2301      	movs	r3, #1
 800466e:	e09d      	b.n	80047ac <_printf_i+0x1e8>
 8004670:	6833      	ldr	r3, [r6, #0]
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	1d19      	adds	r1, r3, #4
 8004676:	6031      	str	r1, [r6, #0]
 8004678:	0606      	lsls	r6, r0, #24
 800467a:	d501      	bpl.n	8004680 <_printf_i+0xbc>
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	e003      	b.n	8004688 <_printf_i+0xc4>
 8004680:	0645      	lsls	r5, r0, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0xb8>
 8004684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004688:	2d00      	cmp	r5, #0
 800468a:	da03      	bge.n	8004694 <_printf_i+0xd0>
 800468c:	232d      	movs	r3, #45	@ 0x2d
 800468e:	426d      	negs	r5, r5
 8004690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004694:	4859      	ldr	r0, [pc, #356]	@ (80047fc <_printf_i+0x238>)
 8004696:	230a      	movs	r3, #10
 8004698:	e011      	b.n	80046be <_printf_i+0xfa>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	6833      	ldr	r3, [r6, #0]
 800469e:	0608      	lsls	r0, r1, #24
 80046a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046a4:	d402      	bmi.n	80046ac <_printf_i+0xe8>
 80046a6:	0649      	lsls	r1, r1, #25
 80046a8:	bf48      	it	mi
 80046aa:	b2ad      	uxthmi	r5, r5
 80046ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ae:	4853      	ldr	r0, [pc, #332]	@ (80047fc <_printf_i+0x238>)
 80046b0:	6033      	str	r3, [r6, #0]
 80046b2:	bf14      	ite	ne
 80046b4:	230a      	movne	r3, #10
 80046b6:	2308      	moveq	r3, #8
 80046b8:	2100      	movs	r1, #0
 80046ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046be:	6866      	ldr	r6, [r4, #4]
 80046c0:	60a6      	str	r6, [r4, #8]
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	bfa2      	ittt	ge
 80046c6:	6821      	ldrge	r1, [r4, #0]
 80046c8:	f021 0104 	bicge.w	r1, r1, #4
 80046cc:	6021      	strge	r1, [r4, #0]
 80046ce:	b90d      	cbnz	r5, 80046d4 <_printf_i+0x110>
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	d04b      	beq.n	800476c <_printf_i+0x1a8>
 80046d4:	4616      	mov	r6, r2
 80046d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80046da:	fb03 5711 	mls	r7, r3, r1, r5
 80046de:	5dc7      	ldrb	r7, [r0, r7]
 80046e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046e4:	462f      	mov	r7, r5
 80046e6:	42bb      	cmp	r3, r7
 80046e8:	460d      	mov	r5, r1
 80046ea:	d9f4      	bls.n	80046d6 <_printf_i+0x112>
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d10b      	bne.n	8004708 <_printf_i+0x144>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	07df      	lsls	r7, r3, #31
 80046f4:	d508      	bpl.n	8004708 <_printf_i+0x144>
 80046f6:	6923      	ldr	r3, [r4, #16]
 80046f8:	6861      	ldr	r1, [r4, #4]
 80046fa:	4299      	cmp	r1, r3
 80046fc:	bfde      	ittt	le
 80046fe:	2330      	movle	r3, #48	@ 0x30
 8004700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004708:	1b92      	subs	r2, r2, r6
 800470a:	6122      	str	r2, [r4, #16]
 800470c:	f8cd a000 	str.w	sl, [sp]
 8004710:	464b      	mov	r3, r9
 8004712:	aa03      	add	r2, sp, #12
 8004714:	4621      	mov	r1, r4
 8004716:	4640      	mov	r0, r8
 8004718:	f7ff fee6 	bl	80044e8 <_printf_common>
 800471c:	3001      	adds	r0, #1
 800471e:	d14a      	bne.n	80047b6 <_printf_i+0x1f2>
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	b004      	add	sp, #16
 8004726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	f043 0320 	orr.w	r3, r3, #32
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	4833      	ldr	r0, [pc, #204]	@ (8004800 <_printf_i+0x23c>)
 8004734:	2778      	movs	r7, #120	@ 0x78
 8004736:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	6831      	ldr	r1, [r6, #0]
 800473e:	061f      	lsls	r7, r3, #24
 8004740:	f851 5b04 	ldr.w	r5, [r1], #4
 8004744:	d402      	bmi.n	800474c <_printf_i+0x188>
 8004746:	065f      	lsls	r7, r3, #25
 8004748:	bf48      	it	mi
 800474a:	b2ad      	uxthmi	r5, r5
 800474c:	6031      	str	r1, [r6, #0]
 800474e:	07d9      	lsls	r1, r3, #31
 8004750:	bf44      	itt	mi
 8004752:	f043 0320 	orrmi.w	r3, r3, #32
 8004756:	6023      	strmi	r3, [r4, #0]
 8004758:	b11d      	cbz	r5, 8004762 <_printf_i+0x19e>
 800475a:	2310      	movs	r3, #16
 800475c:	e7ac      	b.n	80046b8 <_printf_i+0xf4>
 800475e:	4827      	ldr	r0, [pc, #156]	@ (80047fc <_printf_i+0x238>)
 8004760:	e7e9      	b.n	8004736 <_printf_i+0x172>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f023 0320 	bic.w	r3, r3, #32
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	e7f6      	b.n	800475a <_printf_i+0x196>
 800476c:	4616      	mov	r6, r2
 800476e:	e7bd      	b.n	80046ec <_printf_i+0x128>
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	6961      	ldr	r1, [r4, #20]
 8004776:	1d18      	adds	r0, r3, #4
 8004778:	6030      	str	r0, [r6, #0]
 800477a:	062e      	lsls	r6, r5, #24
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	d501      	bpl.n	8004784 <_printf_i+0x1c0>
 8004780:	6019      	str	r1, [r3, #0]
 8004782:	e002      	b.n	800478a <_printf_i+0x1c6>
 8004784:	0668      	lsls	r0, r5, #25
 8004786:	d5fb      	bpl.n	8004780 <_printf_i+0x1bc>
 8004788:	8019      	strh	r1, [r3, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	6123      	str	r3, [r4, #16]
 800478e:	4616      	mov	r6, r2
 8004790:	e7bc      	b.n	800470c <_printf_i+0x148>
 8004792:	6833      	ldr	r3, [r6, #0]
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	6032      	str	r2, [r6, #0]
 8004798:	681e      	ldr	r6, [r3, #0]
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	2100      	movs	r1, #0
 800479e:	4630      	mov	r0, r6
 80047a0:	f7fb fd2e 	bl	8000200 <memchr>
 80047a4:	b108      	cbz	r0, 80047aa <_printf_i+0x1e6>
 80047a6:	1b80      	subs	r0, r0, r6
 80047a8:	6060      	str	r0, [r4, #4]
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	2300      	movs	r3, #0
 80047b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b4:	e7aa      	b.n	800470c <_printf_i+0x148>
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	4632      	mov	r2, r6
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	47d0      	blx	sl
 80047c0:	3001      	adds	r0, #1
 80047c2:	d0ad      	beq.n	8004720 <_printf_i+0x15c>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	079b      	lsls	r3, r3, #30
 80047c8:	d413      	bmi.n	80047f2 <_printf_i+0x22e>
 80047ca:	68e0      	ldr	r0, [r4, #12]
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	4298      	cmp	r0, r3
 80047d0:	bfb8      	it	lt
 80047d2:	4618      	movlt	r0, r3
 80047d4:	e7a6      	b.n	8004724 <_printf_i+0x160>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4632      	mov	r2, r6
 80047da:	4649      	mov	r1, r9
 80047dc:	4640      	mov	r0, r8
 80047de:	47d0      	blx	sl
 80047e0:	3001      	adds	r0, #1
 80047e2:	d09d      	beq.n	8004720 <_printf_i+0x15c>
 80047e4:	3501      	adds	r5, #1
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	9903      	ldr	r1, [sp, #12]
 80047ea:	1a5b      	subs	r3, r3, r1
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dcf2      	bgt.n	80047d6 <_printf_i+0x212>
 80047f0:	e7eb      	b.n	80047ca <_printf_i+0x206>
 80047f2:	2500      	movs	r5, #0
 80047f4:	f104 0619 	add.w	r6, r4, #25
 80047f8:	e7f5      	b.n	80047e6 <_printf_i+0x222>
 80047fa:	bf00      	nop
 80047fc:	080056a9 	.word	0x080056a9
 8004800:	080056ba 	.word	0x080056ba

08004804 <memmove>:
 8004804:	4288      	cmp	r0, r1
 8004806:	b510      	push	{r4, lr}
 8004808:	eb01 0402 	add.w	r4, r1, r2
 800480c:	d902      	bls.n	8004814 <memmove+0x10>
 800480e:	4284      	cmp	r4, r0
 8004810:	4623      	mov	r3, r4
 8004812:	d807      	bhi.n	8004824 <memmove+0x20>
 8004814:	1e43      	subs	r3, r0, #1
 8004816:	42a1      	cmp	r1, r4
 8004818:	d008      	beq.n	800482c <memmove+0x28>
 800481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004822:	e7f8      	b.n	8004816 <memmove+0x12>
 8004824:	4402      	add	r2, r0
 8004826:	4601      	mov	r1, r0
 8004828:	428a      	cmp	r2, r1
 800482a:	d100      	bne.n	800482e <memmove+0x2a>
 800482c:	bd10      	pop	{r4, pc}
 800482e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004836:	e7f7      	b.n	8004828 <memmove+0x24>

08004838 <_sbrk_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d06      	ldr	r5, [pc, #24]	@ (8004854 <_sbrk_r+0x1c>)
 800483c:	2300      	movs	r3, #0
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc fcfc 	bl	8001240 <_sbrk>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_sbrk_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_sbrk_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	200006f4 	.word	0x200006f4

08004858 <memcpy>:
 8004858:	440a      	add	r2, r1
 800485a:	4291      	cmp	r1, r2
 800485c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004860:	d100      	bne.n	8004864 <memcpy+0xc>
 8004862:	4770      	bx	lr
 8004864:	b510      	push	{r4, lr}
 8004866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800486a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800486e:	4291      	cmp	r1, r2
 8004870:	d1f9      	bne.n	8004866 <memcpy+0xe>
 8004872:	bd10      	pop	{r4, pc}

08004874 <_realloc_r>:
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	4680      	mov	r8, r0
 800487a:	4615      	mov	r5, r2
 800487c:	460c      	mov	r4, r1
 800487e:	b921      	cbnz	r1, 800488a <_realloc_r+0x16>
 8004880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	4611      	mov	r1, r2
 8004886:	f7ff bc4b 	b.w	8004120 <_malloc_r>
 800488a:	b92a      	cbnz	r2, 8004898 <_realloc_r+0x24>
 800488c:	f7ff fbdc 	bl	8004048 <_free_r>
 8004890:	2400      	movs	r4, #0
 8004892:	4620      	mov	r0, r4
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	f000 f81a 	bl	80048d0 <_malloc_usable_size_r>
 800489c:	4285      	cmp	r5, r0
 800489e:	4606      	mov	r6, r0
 80048a0:	d802      	bhi.n	80048a8 <_realloc_r+0x34>
 80048a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048a6:	d8f4      	bhi.n	8004892 <_realloc_r+0x1e>
 80048a8:	4629      	mov	r1, r5
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fc38 	bl	8004120 <_malloc_r>
 80048b0:	4607      	mov	r7, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0ec      	beq.n	8004890 <_realloc_r+0x1c>
 80048b6:	42b5      	cmp	r5, r6
 80048b8:	462a      	mov	r2, r5
 80048ba:	4621      	mov	r1, r4
 80048bc:	bf28      	it	cs
 80048be:	4632      	movcs	r2, r6
 80048c0:	f7ff ffca 	bl	8004858 <memcpy>
 80048c4:	4621      	mov	r1, r4
 80048c6:	4640      	mov	r0, r8
 80048c8:	f7ff fbbe 	bl	8004048 <_free_r>
 80048cc:	463c      	mov	r4, r7
 80048ce:	e7e0      	b.n	8004892 <_realloc_r+0x1e>

080048d0 <_malloc_usable_size_r>:
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f18      	subs	r0, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbc      	itt	lt
 80048da:	580b      	ldrlt	r3, [r1, r0]
 80048dc:	18c0      	addlt	r0, r0, r3
 80048de:	4770      	bx	lr

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
